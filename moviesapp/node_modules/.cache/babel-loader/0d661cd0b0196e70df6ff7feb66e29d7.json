{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nconst initialState = {\n  isFetching: false,\n  isFetched: false,\n  error: null,\n  data: [],\n  dataById: {},\n  totalResults: 0\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_FETCHING':\n      return _objectSpread({}, state, {}, action.payload);\n\n    case 'SET_ERROR':\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    case 'SET_DATA':\n      return _objectSpread({}, state, {\n        data: action.payload.data,\n        totalResults: action.payload.totalResults\n      });\n\n    case 'SET_DATA_BY_ID':\n      return _objectSpread({}, state, {\n        dataById: _objectSpread({}, state.dataById, {}, action.payload)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/reducers/appDataReducer.js"],"names":["initialState","isFetching","isFetched","error","data","dataById","totalResults","reducer","state","action","type","payload"],"mappings":";AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE,IAHY;AAInBC,EAAAA,IAAI,EAAE,EAJa;AAKnBC,EAAAA,QAAQ,EAAE,EALS;AAMnBC,EAAAA,YAAY,EAAE;AANK,CAArB;;AASA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AACE,+BACKF,KADL,MAEKC,MAAM,CAACE,OAFZ;;AAIF,SAAK,WAAL;AACE,+BACKH,KADL;AAEEL,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAFhB;;AAIF,SAAK,UAAL;AACE,+BACKH,KADL;AAEEJ,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAAP,CAAeP,IAFvB;AAGEE,QAAAA,YAAY,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAH/B;;AAKF,SAAK,gBAAL;AACE,+BACKE,KADL;AAEEH,QAAAA,QAAQ,oBACHG,KAAK,CAACH,QADH,MAEHI,MAAM,CAACE,OAFJ;AAFV;;AAOF;AACE,aAAOH,KAAP;AA1BJ;AA4BD,CA7BD;;AA+BA,eAAeD,OAAf","sourcesContent":["const initialState = {\r\n  isFetching: false,\r\n  isFetched: false,\r\n  error: null,\r\n  data: [],\r\n  dataById: {},\r\n  totalResults: 0\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_FETCHING':\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    case 'SET_DATA': \r\n      return {\r\n        ...state,\r\n        data: action.payload.data,\r\n        totalResults: action.payload.totalResults\r\n      };\r\n    case 'SET_DATA_BY_ID': \r\n      return {\r\n        ...state,\r\n        dataById: {\r\n          ...state.dataById, \r\n          ...action.payload\r\n        }\r\n      };\r\n    default: \r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}