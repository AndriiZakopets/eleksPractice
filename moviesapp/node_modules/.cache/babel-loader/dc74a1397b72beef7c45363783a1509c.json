{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions';\n\nconst additionalDataById = results => {\n  return results.reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n};\n\nconst updateData = async (requestFunc, dispatch) => {\n  dispatch(appDataActions.setFetching(true, false));\n\n  try {\n    const _ref = await requestFunc(),\n          results = _ref.results,\n          total_results = _ref.total_results;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData({\n      data: results,\n      totalResults: total_results\n    }));\n    dispatch(appDataActions.setFetching(false, true));\n  } catch (error) {\n    dispatch(appDataActions.setError('error'));\n    dispatch(appDataActions.setFetching(false, false));\n  }\n};\n\nexport const getMovieById = id => async dispatch => {\n  dispatch(appDataActions.setFetching(true, false));\n\n  try {\n    const response = await API.getDetails(id);\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById([response]))));\n    dispatch(appDataActions.setFetching(false, true));\n  } catch (error) {\n    dispatch(appDataActions.setError('error'));\n    dispatch(appDataActions.setFetching(false, false));\n  }\n};\nexport const getMovieByQuery = (...args) => dispatch => {\n  updateData(() => API.getMovieByQuery(...args), dispatch);\n};\nexport const discoverMovies = settings => async dispatch => {\n  updateData(() => API.getMovieDiscover(settings), dispatch);\n};\nexport const asyncActionFactory = (apiFunc, fetchingAction, fulfillledAction, rejectedAction, section) => (...args) => async dispatch => {\n  dispatch(fetchingAction(section, ...args));\n\n  try {\n    const response = await apiFunc();\n    dispatch(fulfillledAction(response, section, ...args));\n  } catch (error) {\n    dispatch(rejectedAction(error, section, ...args));\n  }\n}; // const state = {\n//   movies: {\n//     items: [],\n//     itemsById: {},\n//     isFetching: false,\n//     isFetched: false\n//   },\n//   ratings: {\n//     items: [],\n//     itemsById: {},\n//     isFetching: false,\n//     isFetched: false\n//   },\n//   users: {\n//     items: [],\n//     itemsById: {},\n//     isFetching: false,\n//     isFetched: false\n//   }\n// }\n// const startFetching = (section, query, age) => {\n//   return {\n//     type: 'SET_FETCHING',\n//     payload: {\n//       section,\n//       query,\n//       age\n//     }\n//   };\n// };\n// const getMovies = asyncActionFactory(API.getMovieById, startFetching, successAction, rejectAction, 'movies')\n// const getRating = asyncActionFactory(API.getRatings, startFetching, successAction, rejectAction, 'ratings')\n// getMovies('1917', 123)\n// startFetching('movies', '1917', 123)\n// const reducer = (state = initialState, action = {}) => {\n//   const { type, payload } = action;\n//   switch (action.type) {\n//     case 'SET_FETCHING':\n//       return {\n//         ...state,\n//         [payload.section]: {\n//           ...state[payload.section],\n//           isFetching: true\n//         }\n//       };\n//     }\n// }","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","additionalDataById","results","reduce","acc","curr","id","updateData","requestFunc","dispatch","setFetching","total_results","setDataById","setData","data","totalResults","error","setError","getMovieById","response","getDetails","getMovieByQuery","args","discoverMovies","settings","getMovieDiscover","asyncActionFactory","apiFunc","fetchingAction","fulfillledAction","rejectedAction","section"],"mappings":"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","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\nconst additionalDataById = results => {\r\n  return results.reduce((acc, curr) => {\r\n    acc[curr.id] = curr;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nconst updateData = async (requestFunc, dispatch) => {\r\n  dispatch(appDataActions.setFetching(true, false));\r\n\r\n  try {\r\n    const { results, total_results } = await requestFunc();\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData({ data: results, totalResults: total_results }));\r\n    dispatch(appDataActions.setFetching(false, true));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError('error'));\r\n    dispatch(appDataActions.setFetching(false, false));\r\n  }\r\n}\r\n\r\nexport const getMovieById = id => async dispatch => {\r\n  dispatch(appDataActions.setFetching(true, false));\r\n\r\n  try {\r\n    const response = await API.getDetails(id);\r\n\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById([response])\r\n    }));\r\n    dispatch(appDataActions.setFetching(false, true));\r\n  }\r\n  catch (error) {\r\n    dispatch(appDataActions.setError('error'));\r\n    dispatch(appDataActions.setFetching(false, false));\r\n  }\r\n};\r\n\r\nexport const getMovieByQuery = (...args) => dispatch => {\r\n  updateData(() => API.getMovieByQuery(...args), dispatch);\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  updateData(() => API.getMovieDiscover(settings), dispatch);\r\n}\r\n\r\n\r\nexport const asyncActionFactory = (apiFunc, fetchingAction, fulfillledAction, rejectedAction, section) =>\r\n  (...args) => async dispatch => {\r\n    dispatch(fetchingAction(section, ...args));\r\n\r\n    try {\r\n      const response = await apiFunc();\r\n\r\n      dispatch(fulfillledAction(response, section, ...args));\r\n    } catch (error) {\r\n      dispatch(rejectedAction(error, section, ...args));\r\n    }\r\n  }\r\n\r\n// const state = {\r\n//   movies: {\r\n//     items: [],\r\n//     itemsById: {},\r\n//     isFetching: false,\r\n//     isFetched: false\r\n//   },\r\n//   ratings: {\r\n//     items: [],\r\n//     itemsById: {},\r\n//     isFetching: false,\r\n//     isFetched: false\r\n//   },\r\n//   users: {\r\n//     items: [],\r\n//     itemsById: {},\r\n//     isFetching: false,\r\n//     isFetched: false\r\n//   }\r\n// }\r\n\r\n// const startFetching = (section, query, age) => {\r\n//   return {\r\n//     type: 'SET_FETCHING',\r\n//     payload: {\r\n//       section,\r\n//       query,\r\n//       age\r\n//     }\r\n//   };\r\n// };\r\n\r\n// const getMovies = asyncActionFactory(API.getMovieById, startFetching, successAction, rejectAction, 'movies')\r\n// const getRating = asyncActionFactory(API.getRatings, startFetching, successAction, rejectAction, 'ratings')\r\n\r\n// getMovies('1917', 123)\r\n\r\n// startFetching('movies', '1917', 123)\r\n\r\n\r\n// const reducer = (state = initialState, action = {}) => {\r\n//   const { type, payload } = action;\r\n\r\n//   switch (action.type) {\r\n//     case 'SET_FETCHING':\r\n//       return {\r\n//         ...state,\r\n//         [payload.section]: {\r\n//           ...state[payload.section],\r\n//           isFetching: true\r\n//         }\r\n//       };\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}