{"ast":null,"code":"import API from '../API';\nimport appDataActions from '../actions/appDataActions'; // export const getMovieById = id => async dispatch => {\n//   dispatch( setFetching(true) );\n//   try {\n//     const response = await API.getDetails(id);\n//     dispatch(setData(response));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(true));\n//   }\n//   catch (error) {\n//     dispatch(setError(error));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(false));\n//   }\n// };\n// export const getMovieByQuery = settings => async dispatch => {\n//   dispatch( setFetching(true) );\n//   try {\n//     const { results, total_pages } = await API.getMovieByQuery(settings);\n//     const additionalDataById = results.reduce((acc, curr) => {\n//       res[curr.id] = curr;\n//       return acc;\n//     }, {});\n//     dispatch(appDataActions.setDataById({\n//       ...additionalDataById\n//     }));\n//     dispatch(appDataActions.setData(results));\n//     dispatch(appDataActions.setTotalPages(total_pages));\n//     dispatch(appDataActions.setFetching({ isFetching: false, isFetched: true }));\n//   }\n//   catch (error) {\n//     dispatch(setError(error));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(false));\n//   }\n// };\n\nexport const discoverMovies = settings => async dispatch => {\n  dispatch(appDataActions.setFetching(true));\n\n  try {\n    const response = await API.getMovieDiscover(settings);\n    dispatch(appDataActions.setData(response));\n    dispatch(appDataActions.setFetching(false));\n    dispatch(appDataActions.setFetched(true));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching(false));\n    dispatch(appDataActions.setFetched(false));\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","discoverMovies","settings","dispatch","setFetching","response","getMovieDiscover","setData","setFetched","error","setError"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,2BAA3B,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAGC,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAC1DA,EAAAA,QAAQ,CAAEH,cAAc,CAACI,WAAf,CAA2B,IAA3B,CAAF,CAAR;;AAEA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,gBAAJ,CAAqBJ,QAArB,CAAvB;AACAC,IAAAA,QAAQ,CAAEH,cAAc,CAACO,OAAf,CAAuBF,QAAvB,CAAF,CAAR;AACAF,IAAAA,QAAQ,CAAEH,cAAc,CAACI,WAAf,CAA2B,KAA3B,CAAF,CAAR;AACAD,IAAAA,QAAQ,CAAEH,cAAc,CAACQ,UAAf,CAA0B,IAA1B,CAAF,CAAR;AACD,GALD,CAMA,OAAOC,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAAEH,cAAc,CAACU,QAAf,CAAwBD,KAAxB,CAAF,CAAR;AACAN,IAAAA,QAAQ,CAAEH,cAAc,CAACI,WAAf,CAA2B,KAA3B,CAAF,CAAR;AACAD,IAAAA,QAAQ,CAAEH,cAAc,CAACQ,UAAf,CAA0B,KAA1B,CAAF,CAAR;AACD;AACF,CAdM","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\n// export const getMovieById = id => async dispatch => {\r\n//   dispatch( setFetching(true) );\r\n\r\n//   try {\r\n//     const response = await API.getDetails(id);\r\n//     dispatch(setData(response));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(true));\r\n//   }\r\n//   catch (error) {\r\n//     dispatch(setError(error));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(false));\r\n//   }\r\n// };\r\n\r\n// export const getMovieByQuery = settings => async dispatch => {\r\n//   dispatch( setFetching(true) );\r\n\r\n//   try {\r\n//     const { results, total_pages } = await API.getMovieByQuery(settings);\r\n//     const additionalDataById = results.reduce((acc, curr) => {\r\n//       res[curr.id] = curr;\r\n//       return acc;\r\n//     }, {});\r\n//     dispatch(appDataActions.setDataById({\r\n//       ...additionalDataById\r\n//     }));\r\n//     dispatch(appDataActions.setData(results));\r\n//     dispatch(appDataActions.setTotalPages(total_pages));\r\n//     dispatch(appDataActions.setFetching({ isFetching: false, isFetched: true }));\r\n//   }\r\n//   catch (error) {\r\n//     dispatch(setError(error));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(false));\r\n//   }\r\n// };\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  dispatch( appDataActions.setFetching(true) );\r\n\r\n  try {\r\n    const response = await API.getMovieDiscover(settings);\r\n    dispatch( appDataActions.setData(response) );\r\n    dispatch( appDataActions.setFetching(false) );\r\n    dispatch( appDataActions.setFetched(true) );\r\n  }\r\n  catch (error) {\r\n    dispatch( appDataActions.setError(error) );\r\n    dispatch( appDataActions.setFetching(false) );\r\n    dispatch( appDataActions.setFetched(false) );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}