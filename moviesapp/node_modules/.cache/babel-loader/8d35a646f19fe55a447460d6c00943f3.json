{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\components\\\\Catalog.js\";\nimport React, { useEffect, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport API from '../API';\nimport Filters from './Filters';\nimport ListItem from './ListItem'; // const TRENDING = 'trending';\n// const POPULAR = 'popular';\n// const TOP = 'top';\n// const REQUEST_MAP = {\n//   [TRENDING]: API.getTrending,\n//   [POPULAR]: API.getPopular,\n//   [TOP]: API.getTopRated\n// }\n// function Catalog(props) {\n//   const [tempSearchQuery, setTempSearchQuery] = useState('');\n//   const [data, setData] = useState([]);\n//   const [settings, setSettings] = useState({\n//     sorting: localStorage.getItem('sorting') || 'trending',\n//     page: localStorage.getItem('page') || 1,\n//     searchQuery: ''\n//   });\n//   useEffect((_prevProps, _prevState) => {\n//     localStorage.setItem('page', settings.page);\n//     fetchData();\n//   }, [settings]);\n//   const changeData =  ({ results }) => setData(results);\n//   const fetchData = () => {\n//     const { searchQuery, sorting, page } = settings;\n//     if (searchQuery) {\n//       API.getMovieByQuery(page, searchQuery).then(changeData);\n//     } else {\n//       const requestFunc = REQUEST_MAP[sorting];\n//       if (requestFunc) {\n//         requestFunc(page).then(changeData);\n//       }\n//     }\n//   }\n//   const changeSettings = (update = {}) => {\n//     setSettings(prevState => ({\n//       ...prevState,\n//       page: 1,\n//       ...update\n//     }));\n//   }\n//   const onChange = searchQuery => {\n//     changeSettings({ searchQuery });\n//   };\n//   const onChangeDebounced = debounce(onChange, 400);\n//   const onTextChange = e => {\n//     setTempSearchQuery(e.target.value);\n//     onChangeDebounced(e.target.value);\n//   }\n//   const onSelectChange = e => {\n//     localStorage.setItem('sorting', e.target.value);\n//     changeSettings({ sorting: e.target.value })\n//   }\n//   return (\n//     <div className=\"Catalog\">\n//       <div className=\"filters\">\n//         <TextField\n//           label=\"Search\"\n//           value={tempSearchQuery}\n//           onChange={onTextChange}\n//         />\n//         <Select\n//           disabled={!!settings.searchQuery}\n//           onChange={onSelectChange}\n//           value={settings.sorting}\n//         >\n//           <MenuItem value=\"trending\">\n//             trending\n//           </MenuItem>\n//           <MenuItem value=\"popular\">\n//             popular\n//           </MenuItem>\n//           <MenuItem value=\"top\">\n//             top\n//           </MenuItem>\n//         </Select>\n//       </div>\n//       <div className=\"list\">\n//         {\n//           data.map(movie => (\n//             <ListItem\n//               movie={movie}\n//               key={movie.id}\n//               history={props.history}\n//             />\n//           ))\n//         }\n//       </div>\n//     </div>\n//   );\n// }\n\nconst TRENDING = 'trending';\nconst POPULAR = 'popular';\nconst TOP = 'top';\nconst REQUEST_MAP = {\n  [TRENDING]: API.getTrending,\n  [POPULAR]: API.getPopular,\n  [TOP]: API.getTopRated\n};\n\nfunction Catalog({\n  history,\n  changeCacheData\n}) {\n  ;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState({\n    sorting: localStorage.getItem('sorting') || 'trending',\n    page: localStorage.getItem('page') || 1,\n    searchQuery: ''\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        settings = _useState4[0],\n        setSettings = _useState4[1];\n\n  const changeSettings = (newSettings = {}) => {\n    setSettings(prevState => _objectSpread({}, prevState, {\n      page: 1\n    }, newSettings));\n  };\n\n  const changeSettingsDebounced = debounce(changeSettings, 2000);\n  useEffect(() => {\n    localStorage.setItem('page', settings.page);\n    fetchData();\n  }, [settings]);\n  useEffect(() => {\n    const additionData = {};\n    data.forEach(dataItem => {\n      additionData[dataItem.id] = dataItem;\n    });\n    changeCacheData(prevState => {\n      const newObj = _objectSpread({}, prevState, {}, additionData);\n\n      console.log(newObj);\n      return newObj;\n    });\n  }, [data]);\n\n  const changeData = ({\n    results\n  }) => setData(results);\n\n  const fetchData = () => {\n    const searchQuery = settings.searchQuery,\n          sorting = settings.sorting,\n          page = settings.page;\n\n    if (searchQuery) {\n      API.getMovieByQuery(page, searchQuery).then(changeData);\n    } else {\n      const requestFunc = REQUEST_MAP[sorting];\n\n      if (requestFunc) {\n        requestFunc(page).then(changeData);\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Catalog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Filters, {\n    settings: settings,\n    changeSettings: changeSettings,\n    changeSettingsDebounced: changeSettingsDebounced,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, data.map(movie => React.createElement(ListItem, {\n    movie: movie,\n    key: movie.id,\n    history: history,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }))));\n}\n\nexport default Catalog;","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/components/Catalog.js"],"names":["React","useEffect","useState","debounce","API","Filters","ListItem","TRENDING","POPULAR","TOP","REQUEST_MAP","getTrending","getPopular","getTopRated","Catalog","history","changeCacheData","data","setData","sorting","localStorage","getItem","page","searchQuery","settings","setSettings","changeSettings","newSettings","prevState","changeSettingsDebounced","setItem","fetchData","additionData","forEach","dataItem","id","newObj","console","log","changeData","results","getMovieByQuery","then","requestFunc","map","movie"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport API from '../API'\r\nimport Filters from './Filters'\r\nimport ListItem from './ListItem';\r\n\r\n// const TRENDING = 'trending';\r\n// const POPULAR = 'popular';\r\n// const TOP = 'top';\r\n\r\n// const REQUEST_MAP = {\r\n//   [TRENDING]: API.getTrending,\r\n//   [POPULAR]: API.getPopular,\r\n//   [TOP]: API.getTopRated\r\n// }\r\n\r\n// function Catalog(props) {\r\n//   const [tempSearchQuery, setTempSearchQuery] = useState('');\r\n//   const [data, setData] = useState([]);\r\n//   const [settings, setSettings] = useState({\r\n//     sorting: localStorage.getItem('sorting') || 'trending',\r\n//     page: localStorage.getItem('page') || 1,\r\n//     searchQuery: ''\r\n//   });\r\n\r\n//   useEffect((_prevProps, _prevState) => {\r\n//     localStorage.setItem('page', settings.page);\r\n//     fetchData();\r\n//   }, [settings]);\r\n\r\n//   const changeData =  ({ results }) => setData(results);\r\n\r\n//   const fetchData = () => {\r\n//     const { searchQuery, sorting, page } = settings;\r\n\r\n//     if (searchQuery) {\r\n//       API.getMovieByQuery(page, searchQuery).then(changeData);\r\n//     } else {\r\n//       const requestFunc = REQUEST_MAP[sorting];\r\n\r\n//       if (requestFunc) {\r\n//         requestFunc(page).then(changeData);\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   const changeSettings = (update = {}) => {\r\n//     setSettings(prevState => ({\r\n//       ...prevState,\r\n//       page: 1,\r\n//       ...update\r\n//     }));\r\n//   }\r\n\r\n//   const onChange = searchQuery => {\r\n//     changeSettings({ searchQuery });\r\n//   };\r\n\r\n//   const onChangeDebounced = debounce(onChange, 400);\r\n\r\n//   const onTextChange = e => {\r\n//     setTempSearchQuery(e.target.value);\r\n//     onChangeDebounced(e.target.value);\r\n//   }\r\n\r\n//   const onSelectChange = e => {\r\n//     localStorage.setItem('sorting', e.target.value);\r\n//     changeSettings({ sorting: e.target.value })\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"Catalog\">\r\n//       <div className=\"filters\">\r\n//         <TextField\r\n//           label=\"Search\"\r\n//           value={tempSearchQuery}\r\n//           onChange={onTextChange}\r\n//         />\r\n//         <Select\r\n//           disabled={!!settings.searchQuery}\r\n//           onChange={onSelectChange}\r\n//           value={settings.sorting}\r\n//         >\r\n//           <MenuItem value=\"trending\">\r\n//             trending\r\n//           </MenuItem>\r\n//           <MenuItem value=\"popular\">\r\n//             popular\r\n//           </MenuItem>\r\n//           <MenuItem value=\"top\">\r\n//             top\r\n//           </MenuItem>\r\n//         </Select>\r\n//       </div>\r\n//       <div className=\"list\">\r\n//         {\r\n//           data.map(movie => (\r\n//             <ListItem\r\n//               movie={movie}\r\n//               key={movie.id}\r\n//               history={props.history}\r\n//             />\r\n//           ))\r\n//         }\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nconst TRENDING = 'trending';\r\nconst POPULAR = 'popular';\r\nconst TOP = 'top';\r\n\r\nconst REQUEST_MAP = {\r\n  [TRENDING]: API.getTrending,\r\n  [POPULAR]: API.getPopular,\r\n  [TOP]: API.getTopRated\r\n}\r\n\r\nfunction Catalog({ history, changeCacheData }) {;\r\n  const [data, setData] = useState([]);\r\n  const [settings, setSettings] = useState({\r\n    sorting: localStorage.getItem('sorting') || 'trending',\r\n    page: localStorage.getItem('page') || 1,\r\n    searchQuery: ''\r\n  });\r\n\r\n  const changeSettings = (newSettings = {}) => {\r\n    setSettings(prevState => ({\r\n      ...prevState,\r\n      page: 1,\r\n      ...newSettings\r\n    }));\r\n  }\r\n  \r\n  const changeSettingsDebounced = debounce(changeSettings, 2000);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('page', settings.page);\r\n    fetchData();\r\n  }, [settings]);\r\n\r\n  useEffect(() => {\r\n    const additionData = {};\r\n\r\n    data.forEach(dataItem => {\r\n      additionData[dataItem.id] = dataItem;\r\n    })\r\n\r\n    changeCacheData((prevState) => {\r\n      const newObj = {\r\n        ...prevState,\r\n        ...additionData\r\n      };\r\n\r\n      console.log(newObj);\r\n\r\n      return newObj;\r\n    })\r\n  }, [data])\r\n\r\n  const changeData =  ({ results }) => setData(results);\r\n\r\n  const fetchData = () => {\r\n    const { searchQuery, sorting, page } = settings;\r\n\r\n    if (searchQuery) {\r\n      API.getMovieByQuery(page, searchQuery).then(changeData);\r\n    } else {\r\n      const requestFunc = REQUEST_MAP[sorting];\r\n\r\n      if (requestFunc) {\r\n        requestFunc(page).then(changeData);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Catalog\">\r\n      <Filters \r\n        settings={settings} \r\n        changeSettings={changeSettings}\r\n        changeSettingsDebounced={changeSettingsDebounced}\r\n      />\r\n      <div className=\"list\">\r\n        {\r\n          data.map(movie => (\r\n            <ListItem\r\n              movie={movie}\r\n              key={movie.id}\r\n              history={history}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}