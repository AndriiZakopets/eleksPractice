{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\INTERN\\\\Documents\\\\Practice\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\INTERN\\\\Documents\\\\Practice\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\INTERN\\\\Documents\\\\Practice\\\\eleksPractice\\\\moviesapp\\\\src\\\\containers\\\\FiltersContainer.js\";\nimport React, { useState, useCallback } from 'react';\nimport Filters from '../components/Filters';\nimport debounce from 'lodash/debounce';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../actions/reducerActions';\n\nfunction FiltersContainer() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        tempSearchQuery = _useState2[0],\n        setTempSearchQuery = _useState2[1];\n\n  const settings = useSelector(state => state.settings);\n  console.log(settings.searchQuery);\n  const dispatch = useDispatch();\n\n  const changeSettings = (prevSettings, newSettings = {}) => {\n    dispatch(actions.setSettings(_objectSpread({}, prevSettings, {\n      page: 1\n    }, newSettings)));\n  };\n\n  const changeSettingsDebounced = useCallback(debounce(changeSettings, 400), []);\n\n  const onSearchQueryChange = e => {\n    changeSettingsDebounced(settings, {\n      searchQuery: e.target.value\n    });\n    setTempSearchQuery(e.target.value);\n  };\n\n  const onSortingChange = e => {\n    changeSettings(settings, {\n      sorting: e.target.value\n    });\n  };\n\n  return React.createElement(Filters, {\n    onSortingChange: onSortingChange,\n    onSearchQueryChange: onSearchQueryChange,\n    searchQuery: tempSearchQuery,\n    sorting: settings.sorting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n}\n\nexport default FiltersContainer;","map":{"version":3,"sources":["C:/Users/INTERN/Documents/Practice/eleksPractice/moviesapp/src/containers/FiltersContainer.js"],"names":["React","useState","useCallback","Filters","debounce","useSelector","useDispatch","actions","FiltersContainer","tempSearchQuery","setTempSearchQuery","settings","state","console","log","searchQuery","dispatch","changeSettings","prevSettings","newSettings","setSettings","page","changeSettingsDebounced","onSearchQueryChange","e","target","value","onSortingChange","sorting"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,SAASC,gBAAT,GAA4B;AAAA,oBACoBP,QAAQ,CAAC,EAAD,CAD5B;AAAA;AAAA,QACnBQ,eADmB;AAAA,QACFC,kBADE;;AAE1B,QAAMC,QAAQ,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,WAArB;AAEA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AAEA,QAAMW,cAAc,GAAG,CAACC,YAAD,EAAeC,WAAW,GAAG,EAA7B,KAAoC;AACzDH,IAAAA,QAAQ,CAACT,OAAO,CAACa,WAAR,mBACJF,YADI;AAEPG,MAAAA,IAAI,EAAE;AAFC,OAGJF,WAHI,EAAD,CAAR;AAKD,GAND;;AAQA,QAAMG,uBAAuB,GAAGpB,WAAW,CAACE,QAAQ,CAACa,cAAD,EAAiB,GAAjB,CAAT,EAAgC,EAAhC,CAA3C;;AAEA,QAAMM,mBAAmB,GAAGC,CAAC,IAAI;AAC/BF,IAAAA,uBAAuB,CAACX,QAAD,EAAW;AAAEI,MAAAA,WAAW,EAAES,CAAC,CAACC,MAAF,CAASC;AAAxB,KAAX,CAAvB;AACAhB,IAAAA,kBAAkB,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACD,GAHD;;AAKA,QAAMC,eAAe,GAAGH,CAAC,IAAI;AAC3BP,IAAAA,cAAc,CAACN,QAAD,EAAW;AAAEiB,MAAAA,OAAO,EAAEJ,CAAC,CAACC,MAAF,CAASC;AAApB,KAAX,CAAd;AACD,GAFD;;AAIA,SACE,oBAAC,OAAD;AACE,IAAA,eAAe,EAAEC,eADnB;AAEE,IAAA,mBAAmB,EAAEJ,mBAFvB;AAGE,IAAA,WAAW,EAAEd,eAHf;AAIE,IAAA,OAAO,EAAEE,QAAQ,CAACiB,OAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD;;AAED,eAAepB,gBAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport Filters from '../components/Filters';\r\nimport debounce from 'lodash/debounce';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../actions/reducerActions';\r\n\r\nfunction FiltersContainer() {\r\n  const [tempSearchQuery, setTempSearchQuery] = useState(''); \r\n  const settings = useSelector(state => state.settings);\r\n  console.log(settings.searchQuery);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeSettings = (prevSettings, newSettings = {}) => {\r\n    dispatch(actions.setSettings({\r\n      ...prevSettings,\r\n      page: 1,\r\n      ...newSettings\r\n    }));\r\n  };\r\n\r\n  const changeSettingsDebounced = useCallback(debounce(changeSettings, 400), []);\r\n\r\n  const onSearchQueryChange = e => {\r\n    changeSettingsDebounced(settings, { searchQuery: e.target.value });\r\n    setTempSearchQuery(e.target.value);\r\n  }\r\n\r\n  const onSortingChange = e => {\r\n    changeSettings(settings, { sorting: e.target.value });\r\n  }\r\n\r\n  return (\r\n    <Filters \r\n      onSortingChange={onSortingChange}\r\n      onSearchQueryChange={onSearchQueryChange}\r\n      searchQuery={tempSearchQuery}\r\n      sorting={settings.sorting}\r\n    />\r\n  );\r\n}\r\n\r\nexport default FiltersContainer;\r\n"]},"metadata":{},"sourceType":"module"}