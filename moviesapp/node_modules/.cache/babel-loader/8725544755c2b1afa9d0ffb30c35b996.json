{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\containers\\\\FiltersContainer.js\";\nimport React, { useState, useCallback } from 'react';\nimport Filters from '../components/Filters';\nimport debounce from 'lodash/debounce';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSettings } from '../actions/settingsActions';\nimport { SORTINGS } from '../constants';\n\nfunction FiltersContainer() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        tempSearchQuery = _useState2[0],\n        setTempSearchQuery = _useState2[1];\n\n  const settings = useSelector(state => state.settings);\n  const isFetching = useSelector(state => state.appData.isFetching);\n  const isFetched = useSelector(state => state.appData.isFetched);\n  const fetchError = useSelector(state => state.appData.error);\n  const dispatch = useDispatch();\n  const changeSettingsDebounced = useCallback(debounce(newSettings => {\n    dispatch(setSettings(_objectSpread({}, newSettings)));\n  }, 400), []);\n\n  const onSearchQueryChange = e => {\n    setTempSearchQuery(e.target.value);\n    changeSettingsDebounced(settings, {\n      searchQuery: e.target.value\n    });\n  };\n\n  const onSortingChange = e => {\n    changeSettings(settings, {\n      sorting: e.target.value\n    });\n  };\n\n  return React.createElement(Filters, {\n    onSortingChange: onSortingChange,\n    onSearchQueryChange: onSearchQueryChange,\n    searchQuery: tempSearchQuery,\n    sorting: settings.sorting,\n    sortingArr: SORTINGS,\n    isFetching: isFetching,\n    isFetched: isFetched,\n    error: fetchError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n}\n\nexport default FiltersContainer;","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/containers/FiltersContainer.js"],"names":["React","useState","useCallback","Filters","debounce","useSelector","useDispatch","setSettings","SORTINGS","FiltersContainer","tempSearchQuery","setTempSearchQuery","settings","state","isFetching","appData","isFetched","fetchError","error","dispatch","changeSettingsDebounced","newSettings","onSearchQueryChange","e","target","value","searchQuery","onSortingChange","changeSettings","sorting"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,SAASC,gBAAT,GAA4B;AAAA,oBACoBR,QAAQ,CAAC,EAAD,CAD5B;AAAA;AAAA,QACnBS,eADmB;AAAA,QACFC,kBADE;;AAE1B,QAAMC,QAAQ,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;AACA,QAAME,UAAU,GAAGT,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACE,OAAN,CAAcD,UAAxB,CAA9B;AACA,QAAME,SAAS,GAAGX,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACE,OAAN,CAAcC,SAAxB,CAA7B;AACA,QAAMC,UAAU,GAAGZ,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACE,OAAN,CAAcG,KAAxB,CAA9B;AAEA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAMc,uBAAuB,GAAGlB,WAAW,CACzCE,QAAQ,CAAEiB,WAAD,IAAiB;AACxBF,IAAAA,QAAQ,CAACZ,WAAW,mBAAMc,WAAN,EAAZ,CAAR;AACD,GAFO,EAEL,GAFK,CADiC,EAIzC,EAJyC,CAA3C;;AAOA,QAAMC,mBAAmB,GAAGC,CAAC,IAAI;AAC/BZ,IAAAA,kBAAkB,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACAL,IAAAA,uBAAuB,CAACR,QAAD,EAAW;AAAEc,MAAAA,WAAW,EAAEH,CAAC,CAACC,MAAF,CAASC;AAAxB,KAAX,CAAvB;AACD,GAHD;;AAKA,QAAME,eAAe,GAAGJ,CAAC,IAAI;AAC3BK,IAAAA,cAAc,CAAChB,QAAD,EAAW;AAAEiB,MAAAA,OAAO,EAAEN,CAAC,CAACC,MAAF,CAASC;AAApB,KAAX,CAAd;AACD,GAFD;;AAIA,SACE,oBAAC,OAAD;AACE,IAAA,eAAe,EAAEE,eADnB;AAEE,IAAA,mBAAmB,EAAEL,mBAFvB;AAGE,IAAA,WAAW,EAAEZ,eAHf;AAIE,IAAA,OAAO,EAAEE,QAAQ,CAACiB,OAJpB;AAKE,IAAA,UAAU,EAAErB,QALd;AAME,IAAA,UAAU,EAAEM,UANd;AAOE,IAAA,SAAS,EAAEE,SAPb;AAQE,IAAA,KAAK,EAAEC,UART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD;;AAED,eAAeR,gBAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport Filters from '../components/Filters';\r\nimport debounce from 'lodash/debounce';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setSettings } from '../actions/settingsActions';\r\nimport { SORTINGS } from '../constants';\r\n\r\nfunction FiltersContainer() {\r\n  const [tempSearchQuery, setTempSearchQuery] = useState(''); \r\n  const settings = useSelector(state => state.settings);\r\n  const isFetching = useSelector(state => state.appData.isFetching);\r\n  const isFetched = useSelector(state => state.appData.isFetched);\r\n  const fetchError = useSelector(state => state.appData.error);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeSettingsDebounced = useCallback(\r\n    debounce((newSettings) => {\r\n      dispatch(setSettings({ ...newSettings }))\r\n    }, 400), \r\n    []\r\n    );\r\n\r\n  const onSearchQueryChange = e => {\r\n    setTempSearchQuery(e.target.value);\r\n    changeSettingsDebounced(settings, { searchQuery: e.target.value });\r\n  }\r\n\r\n  const onSortingChange = e => {\r\n    changeSettings(settings, { sorting: e.target.value });\r\n  }\r\n\r\n  return (\r\n    <Filters \r\n      onSortingChange={onSortingChange}\r\n      onSearchQueryChange={onSearchQueryChange}\r\n      searchQuery={tempSearchQuery}\r\n      sorting={settings.sorting}\r\n      sortingArr={SORTINGS}\r\n      isFetching={isFetching}\r\n      isFetched={isFetched}\r\n      error={fetchError}\r\n    />\r\n  );\r\n}\r\n\r\nexport default FiltersContainer;\r\n"]},"metadata":{},"sourceType":"module"}