{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\INTERN\\\\Documents\\\\Practice\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions';\n\nconst additionalDataById = results => {\n  return results.reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n};\n\nconst updateData = async (requestFunc, dispatch) => {\n  dispatch(appDataActions.setFetching(true, false));\n\n  try {\n    const _ref = await requestFunc(),\n          results = _ref.results,\n          total_results = _ref.total_results;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData({\n      data: results,\n      totalResults: total_results\n    }));\n    dispatch(appDataActions.setFetching(false, true));\n  } catch (error) {\n    dispatch(appDataActions.setError('error'));\n    dispatch(appDataActions.setFetching(false, false));\n  }\n};\n\nexport const getMovieById = id => async dispatch => {\n  dispatch(appDataActions.setFetching(true, false));\n\n  try {\n    const response = await API.getDetails(id);\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(response))));\n    dispatch(appDataActions.setFetching(false, true));\n  } catch (error) {\n    dispatch(appDataActions.setError('error'));\n    dispatch(appDataActions.setFetching(false, false));\n  }\n};\nexport const getMovieByQuery = settings => dispatch => {\n  updateData(() => API.getMovieByQuery(settings), dispatch);\n};\nexport const discoverMovies = settings => async dispatch => {\n  updateData(() => API.getMovieDiscover(settings), dispatch);\n};","map":{"version":3,"sources":["C:/Users/INTERN/Documents/Practice/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","additionalDataById","results","reduce","acc","curr","id","updateData","requestFunc","dispatch","setFetching","total_results","setDataById","setData","data","totalResults","error","setError","getMovieById","response","getDetails","getMovieByQuery","settings","discoverMovies","getMovieDiscover"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AACpC,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnCD,IAAAA,GAAG,CAACC,IAAI,CAACC,EAAN,CAAH,GAAeD,IAAf;AACA,WAAOD,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CALD;;AAOA,MAAMG,UAAU,GAAG,OAAOC,WAAP,EAAoBC,QAApB,KAAiC;AAClDA,EAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,IAA3B,EAAiC,KAAjC,CAAD,CAAR;;AAEA,MAAI;AAAA,iBACiC,MAAMF,WAAW,EADlD;AAAA,UACMN,OADN,QACMA,OADN;AAAA,UACeS,aADf,QACeA,aADf;;AAEFF,IAAAA,QAAQ,CAACT,cAAc,CAACY,WAAf,mBACJX,kBAAkB,CAACC,OAAD,CADd,EAAD,CAAR;AAGAO,IAAAA,QAAQ,CAACT,cAAc,CAACa,OAAf,CAAuB;AAAEC,MAAAA,IAAI,EAAEZ,OAAR;AAAiBa,MAAAA,YAAY,EAAEJ;AAA/B,KAAvB,CAAD,CAAR;AACAF,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,IAAlC,CAAD,CAAR;AACD,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAACT,cAAc,CAACiB,QAAf,CAAwB,OAAxB,CAAD,CAAR;AACAR,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,KAAlC,CAAD,CAAR;AACD;AACF,CAdD;;AAgBA,OAAO,MAAMQ,YAAY,GAAGZ,EAAE,IAAI,MAAMG,QAAN,IAAkB;AAClDA,EAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,IAA3B,EAAiC,KAAjC,CAAD,CAAR;;AAEA,MAAI;AACF,UAAMS,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,UAAJ,CAAed,EAAf,CAAvB;AACAG,IAAAA,QAAQ,CAACT,cAAc,CAACY,WAAf,mBACJX,kBAAkB,CAACkB,QAAD,CADd,EAAD,CAAR;AAGAV,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,IAAlC,CAAD,CAAR;AACD,GAND,CAOA,OAAOM,KAAP,EAAc;AACZP,IAAAA,QAAQ,CAACT,cAAc,CAACiB,QAAf,CAAwB,OAAxB,CAAD,CAAR;AACAR,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,KAAlC,CAAD,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMW,eAAe,GAAGC,QAAQ,IAAIb,QAAQ,IAAI;AACrDF,EAAAA,UAAU,CAAC,MAAMR,GAAG,CAACsB,eAAJ,CAAoBC,QAApB,CAAP,EAAsCb,QAAtC,CAAV;AACD,CAFM;AAIP,OAAO,MAAMc,cAAc,GAAGD,QAAQ,IAAI,MAAMb,QAAN,IAAkB;AAC1DF,EAAAA,UAAU,CAAC,MAAMR,GAAG,CAACyB,gBAAJ,CAAqBF,QAArB,CAAP,EAAuCb,QAAvC,CAAV;AACD,CAFM","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\nconst additionalDataById = results => {\r\n  return results.reduce((acc, curr) => {\r\n    acc[curr.id] = curr;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nconst updateData = async (requestFunc, dispatch) => {\r\n  dispatch(appDataActions.setFetching(true, false));\r\n\r\n  try {\r\n    const { results, total_results } = await requestFunc();\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData({ data: results, totalResults: total_results }));\r\n    dispatch(appDataActions.setFetching(false, true));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError('error'));\r\n    dispatch(appDataActions.setFetching(false, false));\r\n  }\r\n}\r\n\r\nexport const getMovieById = id => async dispatch => {\r\n  dispatch(appDataActions.setFetching(true, false));\r\n\r\n  try {\r\n    const response = await API.getDetails(id);\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(response)\r\n    }));\r\n    dispatch(appDataActions.setFetching(false, true));\r\n  }\r\n  catch (error) {\r\n    dispatch(appDataActions.setError('error'));\r\n    dispatch(appDataActions.setFetching(false, false));\r\n  }\r\n};\r\n\r\nexport const getMovieByQuery = settings => dispatch => {\r\n  updateData(() => API.getMovieByQuery(settings), dispatch);\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  updateData(() => API.getMovieDiscover(settings), dispatch);\r\n}"]},"metadata":{},"sourceType":"module"}