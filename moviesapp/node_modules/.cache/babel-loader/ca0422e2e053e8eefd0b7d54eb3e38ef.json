{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\components\\\\Catalog.js\";\nimport debounce from 'lodash/debounce';\nimport React, { useEffect, useState } from 'react';\nimport API from '../API';\nimport './styles/Catalog.css';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItem from './ListItem';\nconst TRENDING = 'trending';\nconst POPULAR = 'popular';\nconst TOP = 'top';\nconst REQUEST_MAP = {\n  [TRENDING]: API.getTrending,\n  [POPULAR]: API.getPopular,\n  [TOP]: API.getTopRated\n}; // class Catalog extends React.Component {\n//   state = {\n//     tempSearchQuery: '',\n//     settings: {\n//       sorting: localStorage.getItem('sorting') || 'trending',\n//       page: localStorage.getItem('page') || 1,\n//       searchQuery: ''\n//     },\n//     data: []\n//   };\n//   componentDidMount () {\n//     this.fetchData();\n//   }\n//   componentDidUpdate (prevProps, prevState) {\n//     if (this.state.settings !== prevState.settings) {\n//       this.fetchData();\n//     }\n//   }\n//   changeData = ({ results }) => {\n//     this.setState({ data: results });\n//   }\n//   changeSettings = (update = {}) => {\n//     this.setState(prevState => ({\n//       settings: {\n//         ...prevState.settings,\n//         page: 1,\n//         ...update\n//       }\n//     }))\n//   }\n//   onChange = searchQuery => {\n//     this.changeSettings({ searchQuery });\n//   };\n//   onChangeDebounced = debounce(this.onChange, 400);\n//   onTextChange = e => {\n//     this.setState({ tempSearchQuery: e.target.value });\n//     this.onChangeDebounced(e.target.value);\n//   }\n//   fetchData = () => {\n//     const { searchQuery, sorting, page } = this.state.settings;\n//     if (searchQuery) {\n//       API.getMovieByQuery(page, searchQuery).then(this.changeData);\n//     } else {\n//       const requestFunc = REQUEST_MAP[sorting];\n//       if (requestFunc) {\n//         requestFunc(page).then(this.changeData);\n//       }\n//     }\n//   }\n//   onSelectChange = e => {\n//     localStorage.setItem('sorting', e.target.value);\n//     this.changeSettings({ sorting: e.target.value })\n//   }\n//   render() {\n//     const { tempSearchQuery, data, settings: { searchQuery, sorting } } = this.state;\n//     return (\n//       <div className=\"Catalog\">\n//         <div className=\"filters\">\n//           <TextField\n//             label=\"Search\"\n//             value={tempSearchQuery}\n//             onChange={this.onTextChange}\n//           />\n//           <Select\n//             disabled={!!searchQuery}\n//             onChange={this.onSelectChange}\n//             value={sorting}\n//           >\n//             <MenuItem value=\"trending\">\n//               trending\n//             </MenuItem>\n//             <MenuItem value=\"popular\">\n//               popular\n//             </MenuItem>\n//             <MenuItem value=\"top\">\n//               top\n//             </MenuItem>\n//           </Select>\n//         </div>\n//         <div className=\"list\">\n//           {\n//             data.map(movie => (\n//               <ListItem\n//                 movie={movie}\n//                 key={movie.id}\n//                 history={this.props.history}\n//               />\n//             ))\n//           }\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nfunction Catalog() {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        tempSearchQuery = _useState2[0],\n        setTempSearchQuery = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        data = _useState4[0],\n        setData = _useState4[1];\n\n  const _useState5 = useState({\n    sorting: localStorage.getItem('sorting') || 'trending',\n    page: localStorage.getItem('page') || 1,\n    searchQuery: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        settings = _useState6[0],\n        setSettings = _useState6[1];\n\n  const changeData = ({\n    results\n  }) => setData(results);\n\n  const fetchData = () => {\n    const searchQuery = settings.searchQuery,\n          sorting = settings.sorting,\n          page = settings.page;\n\n    if (searchQuery) {\n      API.getMovieByQuery(page, searchQuery).then(changeData);\n    } else {\n      const requestFunc = REQUEST_MAP[sorting];\n\n      if (requestFunc) {\n        requestFunc(page).then(changeData);\n      }\n    }\n  };\n\n  useEffect((_prevProps, _prevState) => {\n    console.log('effect');\n    this.fetchData();\n  }, [settings]);\n\n  const changeSettings = (update = {}) => {\n    setTempSearchQuery(prevState => _objectSpread({}, prevState.settings, {\n      page: 1\n    }, update));\n  };\n\n  const onChange = searchQuery => {\n    changeSettings({\n      searchQuery\n    });\n  };\n\n  const onChangeDebounced = debounce(onChange, 400);\n\n  const onTextChange = e => {\n    this.setState({\n      tempSearchQuery: e.target.value\n    });\n    this.onChangeDebounced(e.target.value);\n  };\n\n  const onSelectChange = e => {\n    localStorage.setItem('sorting', e.target.value);\n    this.changeSettings({\n      sorting: e.target.value\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Catalog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"filters\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    label: \"Search\",\n    value: tempSearchQuery,\n    onChange: this.onTextChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }), React.createElement(Select, {\n    disabled: !!searchQuery,\n    onChange: this.onSelectChange,\n    value: sorting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"trending\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"trending\"), React.createElement(MenuItem, {\n    value: \"popular\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"popular\"), React.createElement(MenuItem, {\n    value: \"top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"top\"))), React.createElement(\"div\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, data.map(movie => React.createElement(ListItem, {\n    movie: movie,\n    key: movie.id,\n    history: this.props.history,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }))));\n}\n\nexport default Catalog;","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/components/Catalog.js"],"names":["debounce","React","useEffect","useState","API","TextField","Select","MenuItem","ListItem","TRENDING","POPULAR","TOP","REQUEST_MAP","getTrending","getPopular","getTopRated","Catalog","tempSearchQuery","setTempSearchQuery","data","setData","sorting","localStorage","getItem","page","searchQuery","settings","setSettings","changeData","results","fetchData","getMovieByQuery","then","requestFunc","_prevProps","_prevState","console","log","changeSettings","update","prevState","onChange","onChangeDebounced","onTextChange","e","setState","target","value","onSelectChange","setItem","map","movie","id","props","history"],"mappings":"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","sourcesContent":["import debounce from 'lodash/debounce'\r\nimport React, { useEffect, useState } from 'react';\r\nimport API from '../API'\r\nimport './styles/Catalog.css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItem from './ListItem';\r\n\r\nconst TRENDING = 'trending';\r\nconst POPULAR = 'popular';\r\nconst TOP = 'top';\r\n\r\nconst REQUEST_MAP = {\r\n  [TRENDING]: API.getTrending,\r\n  [POPULAR]: API.getPopular,\r\n  [TOP]: API.getTopRated\r\n}\r\n\r\n// class Catalog extends React.Component {\r\n//   state = {\r\n//     tempSearchQuery: '',\r\n//     settings: {\r\n//       sorting: localStorage.getItem('sorting') || 'trending',\r\n//       page: localStorage.getItem('page') || 1,\r\n//       searchQuery: ''\r\n//     },\r\n//     data: []\r\n//   };\r\n\r\n//   componentDidMount () {\r\n//     this.fetchData();\r\n//   }\r\n\r\n//   componentDidUpdate (prevProps, prevState) {\r\n//     if (this.state.settings !== prevState.settings) {\r\n//       this.fetchData();\r\n//     }\r\n//   }\r\n\r\n//   changeData = ({ results }) => {\r\n//     this.setState({ data: results });\r\n//   }\r\n\r\n//   changeSettings = (update = {}) => {\r\n//     this.setState(prevState => ({\r\n//       settings: {\r\n//         ...prevState.settings,\r\n//         page: 1,\r\n//         ...update\r\n//       }\r\n//     }))\r\n//   }\r\n\r\n//   onChange = searchQuery => {\r\n//     this.changeSettings({ searchQuery });\r\n//   };\r\n\r\n//   onChangeDebounced = debounce(this.onChange, 400);\r\n\r\n//   onTextChange = e => {\r\n//     this.setState({ tempSearchQuery: e.target.value });\r\n\r\n//     this.onChangeDebounced(e.target.value);\r\n//   }\r\n\r\n//   fetchData = () => {\r\n//     const { searchQuery, sorting, page } = this.state.settings;\r\n\r\n//     if (searchQuery) {\r\n//       API.getMovieByQuery(page, searchQuery).then(this.changeData);\r\n//     } else {\r\n//       const requestFunc = REQUEST_MAP[sorting];\r\n\r\n//       if (requestFunc) {\r\n//         requestFunc(page).then(this.changeData);\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   onSelectChange = e => {\r\n//     localStorage.setItem('sorting', e.target.value);\r\n//     this.changeSettings({ sorting: e.target.value })\r\n//   }\r\n\r\n//   render() {\r\n//     const { tempSearchQuery, data, settings: { searchQuery, sorting } } = this.state;\r\n\r\n//     return (\r\n//       <div className=\"Catalog\">\r\n//         <div className=\"filters\">\r\n//           <TextField\r\n//             label=\"Search\"\r\n//             value={tempSearchQuery}\r\n//             onChange={this.onTextChange}\r\n//           />\r\n//           <Select\r\n//             disabled={!!searchQuery}\r\n//             onChange={this.onSelectChange}\r\n//             value={sorting}\r\n//           >\r\n//             <MenuItem value=\"trending\">\r\n//               trending\r\n//             </MenuItem>\r\n//             <MenuItem value=\"popular\">\r\n//               popular\r\n//             </MenuItem>\r\n//             <MenuItem value=\"top\">\r\n//               top\r\n//             </MenuItem>\r\n//           </Select>\r\n//         </div>\r\n//         <div className=\"list\">\r\n//           {\r\n//             data.map(movie => (\r\n//               <ListItem\r\n//                 movie={movie}\r\n//                 key={movie.id}\r\n//                 history={this.props.history}\r\n//               />\r\n//             ))\r\n//           }\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\nfunction Catalog() {\r\n  const [tempSearchQuery, setTempSearchQuery] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const [settings, setSettings] = useState({\r\n    sorting: localStorage.getItem('sorting') || 'trending',\r\n    page: localStorage.getItem('page') || 1,\r\n    searchQuery: ''\r\n  });\r\n\r\n  const changeData =  ({ results }) => setData(results);\r\n\r\n  const fetchData = () => {\r\n    const { searchQuery, sorting, page } = settings;\r\n\r\n    if (searchQuery) {\r\n      API.getMovieByQuery(page, searchQuery).then(changeData);\r\n    } else {\r\n      const requestFunc = REQUEST_MAP[sorting];\r\n\r\n      if (requestFunc) {\r\n        requestFunc(page).then(changeData);\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect((_prevProps, _prevState) => {\r\n    console.log('effect');\r\n    this.fetchData();\r\n  }, [settings]);\r\n\r\n  const changeSettings = (update = {}) => {\r\n    setTempSearchQuery(prevState => ({\r\n      ...prevState.settings,\r\n      page: 1,\r\n      ...update\r\n    }));\r\n  }\r\n\r\n  const onChange = searchQuery => {\r\n    changeSettings({ searchQuery });\r\n  };\r\n\r\n  const onChangeDebounced = debounce(onChange, 400);\r\n\r\n  const onTextChange = e => {\r\n    this.setState({ tempSearchQuery: e.target.value });\r\n\r\n    this.onChangeDebounced(e.target.value);\r\n  }\r\n\r\n  const onSelectChange = e => {\r\n    localStorage.setItem('sorting', e.target.value);\r\n    this.changeSettings({ sorting: e.target.value })\r\n  }\r\n\r\n  return (\r\n    <div className=\"Catalog\">\r\n      <div className=\"filters\">\r\n        <TextField\r\n          label=\"Search\"\r\n          value={tempSearchQuery}\r\n          onChange={this.onTextChange}\r\n        />\r\n        <Select\r\n          disabled={!!searchQuery}\r\n          onChange={this.onSelectChange}\r\n          value={sorting}\r\n        >\r\n          <MenuItem value=\"trending\">\r\n            trending\r\n          </MenuItem>\r\n          <MenuItem value=\"popular\">\r\n            popular\r\n          </MenuItem>\r\n          <MenuItem value=\"top\">\r\n            top\r\n          </MenuItem>\r\n        </Select>\r\n      </div>\r\n      <div className=\"list\">\r\n        {\r\n          data.map(movie => (\r\n            <ListItem\r\n              movie={movie}\r\n              key={movie.id}\r\n              history={this.props.history}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Catalog;\r\n"]},"metadata":{},"sourceType":"module"}