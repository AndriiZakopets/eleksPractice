{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions';\n\nconst additionalDataById = results => {\n  return results.reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n};\n\nexport const getMovieById = id => async dispatch => {\n  dispatch(appDataActions.setFetching({\n    isFetching: true,\n    isFetched: false\n  }));\n\n  try {\n    const response = await API.getDetails(id);\n    dispatch(setData(response));\n    dispatch(setFetching(false));\n    dispatch(setFetched(true));\n  } catch (error) {\n    dispatch(setError(error));\n    dispatch(setFetching(false));\n    dispatch(setFetched(false));\n  }\n};\nexport const getMovieByQuery = settings => async dispatch => {\n  dispatch(appDataActions.setFetching({\n    isFetching: true,\n    isFetched: false\n  }));\n\n  try {\n    const _ref = await API.getMovieByQuery(settings),\n          results = _ref.results,\n          total_pages = _ref.total_pages;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData({\n      data: results,\n      totalPages: total_pages\n    }));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: true\n    }));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: false\n    }));\n  }\n};\nexport const discoverMovies = settings => async dispatch => {\n  dispatch(appDataActions.setFetching({\n    isFetching: true,\n    isFetched: false\n  }));\n\n  try {\n    const _ref2 = await API.getMovieDiscover(settings),\n          results = _ref2.results,\n          total_pages = _ref2.total_pages;\n\n    console.log(results);\n    dispatch(appDataActions.setData({\n      data: results,\n      totalPages: total_pages\n    }));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: true\n    }));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: false\n    }));\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","additionalDataById","results","reduce","acc","curr","id","getMovieById","dispatch","setFetching","isFetching","isFetched","response","getDetails","setData","setFetched","error","setError","getMovieByQuery","settings","total_pages","setDataById","data","totalPages","discoverMovies","getMovieDiscover","console","log"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AACpC,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnCD,IAAAA,GAAG,CAACC,IAAI,CAACC,EAAN,CAAH,GAAeD,IAAf;AACA,WAAOD,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CALD;;AAOA,OAAO,MAAMG,YAAY,GAAGD,EAAE,IAAI,MAAME,QAAN,IAAkB;AAClDA,EAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,IAAAA,UAAU,EAAE,IADsB;AAElCC,IAAAA,SAAS,EAAE;AAFuB,GAA3B,CAAD,CAAR;;AAKA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,UAAJ,CAAeP,EAAf,CAAvB;AACAE,IAAAA,QAAQ,CAACM,OAAO,CAACF,QAAD,CAAR,CAAR;AACAJ,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACO,UAAU,CAAC,IAAD,CAAX,CAAR;AACD,GALD,CAMA,OAAOC,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAACS,QAAQ,CAACD,KAAD,CAAT,CAAR;AACAR,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACO,UAAU,CAAC,KAAD,CAAX,CAAR;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMG,eAAe,GAAGC,QAAQ,IAAI,MAAMX,QAAN,IAAkB;AAC3DA,EAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,IAAAA,UAAU,EAAE,IADsB;AAElCC,IAAAA,SAAS,EAAE;AAFuB,GAA3B,CAAD,CAAR;;AAKA,MAAI;AAAA,iBAC+B,MAAMZ,GAAG,CAACmB,eAAJ,CAAoBC,QAApB,CADrC;AAAA,UACMjB,OADN,QACMA,OADN;AAAA,UACekB,WADf,QACeA,WADf;;AAEFZ,IAAAA,QAAQ,CAACR,cAAc,CAACqB,WAAf,mBACJpB,kBAAkB,CAACC,OAAD,CADd,EAAD,CAAR;AAGAM,IAAAA,QAAQ,CAACR,cAAc,CAACc,OAAf,CAAuB;AAAEQ,MAAAA,IAAI,EAAEpB,OAAR;AAAiBqB,MAAAA,UAAU,EAAEH;AAA7B,KAAvB,CAAD,CAAR;AACAZ,IAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,MAAAA,UAAU,EAAE,KADsB;AAElCC,MAAAA,SAAS,EAAE;AAFuB,KAA3B,CAAD,CAAR;AAID,GAVD,CAUE,OAAOK,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAACR,cAAc,CAACiB,QAAf,CAAwBD,KAAxB,CAAD,CAAR;AACAR,IAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,MAAAA,UAAU,EAAE,KADsB;AAElCC,MAAAA,SAAS,EAAE;AAFuB,KAA3B,CAAD,CAAR;AAID;AACF,CAvBM;AAyBP,OAAO,MAAMa,cAAc,GAAGL,QAAQ,IAAI,MAAMX,QAAN,IAAkB;AAC1DA,EAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,IAAAA,UAAU,EAAE,IADsB;AAElCC,IAAAA,SAAS,EAAE;AAFuB,GAA3B,CAAD,CAAR;;AAKA,MAAI;AAAA,kBAC+B,MAAMZ,GAAG,CAAC0B,gBAAJ,CAAqBN,QAArB,CADrC;AAAA,UACMjB,OADN,SACMA,OADN;AAAA,UACekB,WADf,SACeA,WADf;;AAEFM,IAAAA,OAAO,CAACC,GAAR,CAAYzB,OAAZ;AACAM,IAAAA,QAAQ,CAACR,cAAc,CAACc,OAAf,CAAuB;AAAEQ,MAAAA,IAAI,EAAEpB,OAAR;AAAiBqB,MAAAA,UAAU,EAAEH;AAA7B,KAAvB,CAAD,CAAR;AACAZ,IAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,MAAAA,UAAU,EAAE,KADsB;AAElCC,MAAAA,SAAS,EAAE;AAFuB,KAA3B,CAAD,CAAR;AAID,GARD,CAQE,OAAOK,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAACR,cAAc,CAACiB,QAAf,CAAwBD,KAAxB,CAAD,CAAR;AACAR,IAAAA,QAAQ,CAACR,cAAc,CAACS,WAAf,CAA2B;AAClCC,MAAAA,UAAU,EAAE,KADsB;AAElCC,MAAAA,SAAS,EAAE;AAFuB,KAA3B,CAAD,CAAR;AAID;AACF,CArBM","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\nconst additionalDataById = results => {\r\n  return results.reduce((acc, curr) => {\r\n    acc[curr.id] = curr;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nexport const getMovieById = id => async dispatch => {\r\n  dispatch(appDataActions.setFetching({\r\n    isFetching: true,\r\n    isFetched: false\r\n  }));\r\n\r\n  try {\r\n    const response = await API.getDetails(id);\r\n    dispatch(setData(response));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(true));\r\n  }\r\n  catch (error) {\r\n    dispatch(setError(error));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(false));\r\n  }\r\n};\r\n\r\nexport const getMovieByQuery = settings => async dispatch => {\r\n  dispatch(appDataActions.setFetching({\r\n    isFetching: true,\r\n    isFetched: false\r\n  }));\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieByQuery(settings);\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData({ data: results, totalPages: total_pages}));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: true\r\n    }));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: false\r\n    }));\r\n  }\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  dispatch(appDataActions.setFetching({\r\n    isFetching: true,\r\n    isFetched: false\r\n  }));\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieDiscover(settings);\r\n    console.log(results);\r\n    dispatch(appDataActions.setData({ data: results, totalPages: total_pages}));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: true\r\n    }));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: false\r\n    }));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}