{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions';\n\nconst additionalDataById = results => {\n  return results.reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n}; // export const getMovieById = id => async dispatch => {\n//   dispatch( setFetching(true) );\n//   try {\n//     const response = await API.getDetails(id);\n//     dispatch(setData(response));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(true));\n//   }\n//   catch (error) {\n//     dispatch(setError(error));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(false));\n//   }\n// };\n\n\nexport const getMovieByQuery = settings => async dispatch => {\n  dispatch(appDataActions.setFetching(true));\n\n  try {\n    const _ref = await API.getMovieByQuery(settings),\n          results = _ref.results,\n          total_pages = _ref.total_pages;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData(results));\n    dispatch(appDataActions.setTotalPages(total_pages));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: true\n    }));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching(false));\n    dispatch(appDataActions.setFetched(false));\n  }\n};\nexport const discoverMovies = settings => async dispatch => {\n  dispatch(appDataActions.setFetching(true));\n\n  try {\n    const response = await API.getMovieDiscover(settings);\n    dispatch(appDataActions.setData(response));\n    dispatch(appDataActions.setFetching(false));\n    dispatch(appDataActions.setFetched(true));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching(false));\n    dispatch(appDataActions.setFetched(false));\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","additionalDataById","results","reduce","acc","curr","id","getMovieByQuery","settings","dispatch","setFetching","total_pages","setDataById","setData","setTotalPages","isFetching","isFetched","error","setError","setFetched","discoverMovies","response","getMovieDiscover"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AACpC,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnCD,IAAAA,GAAG,CAACC,IAAI,CAACC,EAAN,CAAH,GAAeD,IAAf;AACA,WAAOD,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CALD,C,CAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMG,eAAe,GAAGC,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAC3DA,EAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,IAA3B,CAAD,CAAR;;AAEA,MAAI;AAAA,iBAC+B,MAAMX,GAAG,CAACQ,eAAJ,CAAoBC,QAApB,CADrC;AAAA,UACMN,OADN,QACMA,OADN;AAAA,UACeS,WADf,QACeA,WADf;;AAEFF,IAAAA,QAAQ,CAACT,cAAc,CAACY,WAAf,mBACJX,kBAAkB,CAACC,OAAD,CADd,EAAD,CAAR;AAGAO,IAAAA,QAAQ,CAACT,cAAc,CAACa,OAAf,CAAuBX,OAAvB,CAAD,CAAR;AACAO,IAAAA,QAAQ,CAACT,cAAc,CAACc,aAAf,CAA6BH,WAA7B,CAAD,CAAR;AACAF,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B;AAClCK,MAAAA,UAAU,EAAE,KADsB;AAElCC,MAAAA,SAAS,EAAE;AAFuB,KAA3B,CAAD,CAAR;AAID,GAXD,CAYA,OAAOC,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAACT,cAAc,CAACkB,QAAf,CAAwBD,KAAxB,CAAD,CAAR;AACAR,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,CAAD,CAAR;AACAD,IAAAA,QAAQ,CAACT,cAAc,CAACmB,UAAf,CAA0B,KAA1B,CAAD,CAAR;AACD;AACF,CApBM;AAsBP,OAAO,MAAMC,cAAc,GAAGZ,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAC1DA,EAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,IAA3B,CAAD,CAAR;;AAEA,MAAI;AACF,UAAMW,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,gBAAJ,CAAqBd,QAArB,CAAvB;AACAC,IAAAA,QAAQ,CAACT,cAAc,CAACa,OAAf,CAAuBQ,QAAvB,CAAD,CAAR;AACAZ,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,CAAD,CAAR;AACAD,IAAAA,QAAQ,CAACT,cAAc,CAACmB,UAAf,CAA0B,IAA1B,CAAD,CAAR;AACD,GALD,CAMA,OAAOF,KAAP,EAAc;AACZR,IAAAA,QAAQ,CAACT,cAAc,CAACkB,QAAf,CAAwBD,KAAxB,CAAD,CAAR;AACAR,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,CAAD,CAAR;AACAD,IAAAA,QAAQ,CAACT,cAAc,CAACmB,UAAf,CAA0B,KAA1B,CAAD,CAAR;AACD;AACF,CAdM","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\nconst additionalDataById = results => {\r\n  return results.reduce((acc, curr) => {\r\n    acc[curr.id] = curr;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n// export const getMovieById = id => async dispatch => {\r\n//   dispatch( setFetching(true) );\r\n\r\n//   try {\r\n//     const response = await API.getDetails(id);\r\n//     dispatch(setData(response));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(true));\r\n//   }\r\n//   catch (error) {\r\n//     dispatch(setError(error));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(false));\r\n//   }\r\n// };\r\n\r\nexport const getMovieByQuery = settings => async dispatch => {\r\n  dispatch(appDataActions.setFetching(true));\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieByQuery(settings);\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData(results));\r\n    dispatch(appDataActions.setTotalPages(total_pages));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: true\r\n    }));\r\n  }\r\n  catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching(false));\r\n    dispatch(appDataActions.setFetched(false));\r\n  }\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  dispatch(appDataActions.setFetching(true));\r\n\r\n  try {\r\n    const response = await API.getMovieDiscover(settings);\r\n    dispatch(appDataActions.setData(response));\r\n    dispatch(appDataActions.setFetching(false));\r\n    dispatch(appDataActions.setFetched(true));\r\n  }\r\n  catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching(false));\r\n    dispatch(appDataActions.setFetched(false));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}