{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return _objectSpread({}, state, {\n        data: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  data: 0\n};\nconst store = createStore(reducer, initialState);\nconst subscriber1 = store.subscribe(() => console.log(`1. store changed to ${store.getState().data}`));\nconst subscriber2 = store.subscribe(() => console.log(`2. store changed to ${store.getState().data}`));\nconst subscriber3 = store.subscribe(() => console.log(`3. store changed to ${store.getState().data}`));\nstore.dispatch({\n  type: \"CHANGE\",\n  data: 'x'\n});\nsubscriber1();\nstore.dispatch({\n  type: \"CHANGE\",\n  data: '1'\n});\nsubscriber2();\nstore.dispatch({\n  type: \"CHANGE\",\n  data: 'fg'\n});\nsubscriber3();\nstore.dispatch({\n  type: \"CHANGE\",\n  data: 'g232'\n});\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","createStore","reducer","state","action","type","data","initialState","store","subscriber1","subscribe","console","log","getState","subscriber2","subscriber3","dispatch","render","document","getElementById","unregister"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,+BACKF,KADL;AAEEG,QAAAA,IAAI,EAAEF,MAAM,CAACE;AAFf;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAVD;;AAWA,MAAMI,YAAY,GAAG;AACnBD,EAAAA,IAAI,EAAE;AADa,CAArB;AAIA,MAAME,KAAK,GAAGP,WAAW,CAACC,OAAD,EAAUK,YAAV,CAAzB;AAEA,MAAME,WAAW,GAAGD,KAAK,CAACE,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAa,uBAAsBJ,KAAK,CAACK,QAAN,GAAiBP,IAAK,EAAzD,CAAtB,CAApB;AACA,MAAMQ,WAAW,GAAGN,KAAK,CAACE,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAa,uBAAsBJ,KAAK,CAACK,QAAN,GAAiBP,IAAK,EAAzD,CAAtB,CAApB;AACA,MAAMS,WAAW,GAAGP,KAAK,CAACE,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAa,uBAAsBJ,KAAK,CAACK,QAAN,GAAiBP,IAAK,EAAzD,CAAtB,CAApB;AAEAE,KAAK,CAACQ,QAAN,CAAe;AACbX,EAAAA,IAAI,EAAE,QADO;AAEbC,EAAAA,IAAI,EAAE;AAFO,CAAf;AAKAG,WAAW;AAEXD,KAAK,CAACQ,QAAN,CAAe;AACbX,EAAAA,IAAI,EAAE,QADO;AAEbC,EAAAA,IAAI,EAAE;AAFO,CAAf;AAKAQ,WAAW;AAEXN,KAAK,CAACQ,QAAN,CAAe;AACbX,EAAAA,IAAI,EAAE,QADO;AAEbC,EAAAA,IAAI,EAAE;AAFO,CAAf;AAKAS,WAAW;AAEXP,KAAK,CAACQ,QAAN,CAAe;AACbX,EAAAA,IAAI,EAAE,QADO;AAEbC,EAAAA,IAAI,EAAE;AAFO,CAAf;AAKAR,QAAQ,CAACmB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB,E,CAEA;AACA;AACA;;AACAnB,aAAa,CAACoB,UAAd","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\n\r\nconst reducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\": \r\n      return {\r\n        ...state,\r\n        data: action.data\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nconst initialState = {\r\n  data: 0\r\n};\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nconst subscriber1 = store.subscribe(() => console.log(`1. store changed to ${store.getState().data}`));\r\nconst subscriber2 = store.subscribe(() => console.log(`2. store changed to ${store.getState().data}`));\r\nconst subscriber3 = store.subscribe(() => console.log(`3. store changed to ${store.getState().data}`));\r\n\r\nstore.dispatch({ \r\n  type: \"CHANGE\",\r\n  data: 'x'\r\n});\r\n\r\nsubscriber1();\r\n\r\nstore.dispatch({ \r\n  type: \"CHANGE\",\r\n  data: '1'\r\n});\r\n\r\nsubscriber2();\r\n\r\nstore.dispatch({ \r\n  type: \"CHANGE\",\r\n  data: 'fg'\r\n});\r\n\r\nsubscriber3();\r\n\r\nstore.dispatch({ \r\n  type: \"CHANGE\",\r\n  data: 'g232'\r\n});\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"]},"metadata":{},"sourceType":"module"}