{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions';\n\nconst additionalDataById = results => {\n  return results.reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n};\n\nconst updateData = async (requestFunc, dispatch) => {\n  dispatch(appDataActions.setFetching(true, false));\n\n  try {\n    const _ref = await requestFunc(),\n          results = _ref.results,\n          total_pages = _ref.total_pages;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData({\n      data: results,\n      totalPages: total_pages\n    }));\n    dispatch(appDataActions.setFetching(false, true));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching(false, false));\n  }\n}; // export const getMovieById = id => async dispatch => {\n//   dispatch(appDataActions.setFetching(true, false));\n//   try {\n//     const response = await API.getDetails(id);\n//     dispatch(setData(response));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(true));\n//   }\n//   catch (error) {\n//     dispatch(setError(error));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(false));\n//   }\n// };\n\n\nexport const getMovieByQuery = settings => dispatch => {\n  updateData(() => API.getMovieByQuery(settings), dispatch);\n};\nexport const discoverMovies = settings => async dispatch => {\n  dispatch(appDataActions.setFetching(true, false));\n\n  try {\n    const _ref2 = await API.getMovieDiscover(settings),\n          results = _ref2.results,\n          total_pages = _ref2.total_pages;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData({\n      data: results,\n      totalPages: total_pages\n    }));\n    dispatch(appDataActions.setFetching(false, true));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching(false, false));\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","additionalDataById","results","reduce","acc","curr","id","updateData","requestFunc","dispatch","setFetching","total_pages","setDataById","setData","data","totalPages","error","setError","getMovieByQuery","settings","discoverMovies","getMovieDiscover"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;;AAEA,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AACpC,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnCD,IAAAA,GAAG,CAACC,IAAI,CAACC,EAAN,CAAH,GAAeD,IAAf;AACA,WAAOD,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CALD;;AAOA,MAAMG,UAAU,GAAG,OAAOC,WAAP,EAAoBC,QAApB,KAAiC;AAClDA,EAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,IAA3B,EAAiC,KAAjC,CAAD,CAAR;;AAEA,MAAI;AAAA,iBAC+B,MAAMF,WAAW,EADhD;AAAA,UACMN,OADN,QACMA,OADN;AAAA,UACeS,WADf,QACeA,WADf;;AAEFF,IAAAA,QAAQ,CAACT,cAAc,CAACY,WAAf,mBACJX,kBAAkB,CAACC,OAAD,CADd,EAAD,CAAR;AAGAO,IAAAA,QAAQ,CAACT,cAAc,CAACa,OAAf,CAAuB;AAAEC,MAAAA,IAAI,EAAEZ,OAAR;AAAiBa,MAAAA,UAAU,EAAEJ;AAA7B,KAAvB,CAAD,CAAR;AACAF,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,IAAlC,CAAD,CAAR;AACD,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAACT,cAAc,CAACiB,QAAf,CAAwBD,KAAxB,CAAD,CAAR;AACAP,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,KAAlC,CAAD,CAAR;AACD;AACF,CAdD,C,CAgBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMQ,eAAe,GAAGC,QAAQ,IAAIV,QAAQ,IAAI;AACrDF,EAAAA,UAAU,CAAC,MAAMR,GAAG,CAACmB,eAAJ,CAAoBC,QAApB,CAAP,EAAsCV,QAAtC,CAAV;AACD,CAFM;AAIP,OAAO,MAAMW,cAAc,GAAGD,QAAQ,IAAI,MAAMV,QAAN,IAAkB;AAC1DA,EAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,IAA3B,EAAiC,KAAjC,CAAD,CAAR;;AAEA,MAAI;AAAA,kBAC+B,MAAMX,GAAG,CAACsB,gBAAJ,CAAqBF,QAArB,CADrC;AAAA,UACMjB,OADN,SACMA,OADN;AAAA,UACeS,WADf,SACeA,WADf;;AAEFF,IAAAA,QAAQ,CAACT,cAAc,CAACY,WAAf,mBACJX,kBAAkB,CAACC,OAAD,CADd,EAAD,CAAR;AAGAO,IAAAA,QAAQ,CAACT,cAAc,CAACa,OAAf,CAAuB;AAAEC,MAAAA,IAAI,EAAEZ,OAAR;AAAiBa,MAAAA,UAAU,EAAEJ;AAA7B,KAAvB,CAAD,CAAR;AACAF,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,IAAlC,CAAD,CAAR;AACD,GAPD,CAOE,OAAOM,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAACT,cAAc,CAACiB,QAAf,CAAwBD,KAAxB,CAAD,CAAR;AACAP,IAAAA,QAAQ,CAACT,cAAc,CAACU,WAAf,CAA2B,KAA3B,EAAkC,KAAlC,CAAD,CAAR;AACD;AACF,CAdM","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\nconst additionalDataById = results => {\r\n  return results.reduce((acc, curr) => {\r\n    acc[curr.id] = curr;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\nconst updateData = async (requestFunc, dispatch) => {\r\n  dispatch(appDataActions.setFetching(true, false));\r\n\r\n  try {\r\n    const { results, total_pages } = await requestFunc();\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData({ data: results, totalPages: total_pages}));\r\n    dispatch(appDataActions.setFetching(false, true));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching(false, false));\r\n  }\r\n}\r\n\r\n// export const getMovieById = id => async dispatch => {\r\n//   dispatch(appDataActions.setFetching(true, false));\r\n\r\n//   try {\r\n//     const response = await API.getDetails(id);\r\n//     dispatch(setData(response));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(true));\r\n//   }\r\n//   catch (error) {\r\n//     dispatch(setError(error));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(false));\r\n//   }\r\n// };\r\n\r\nexport const getMovieByQuery = settings => dispatch => {\r\n  updateData(() => API.getMovieByQuery(settings), dispatch);\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  dispatch(appDataActions.setFetching(true, false));\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieDiscover(settings);\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData({ data: results, totalPages: total_pages}));\r\n    dispatch(appDataActions.setFetching(false, true));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching(false, false));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}