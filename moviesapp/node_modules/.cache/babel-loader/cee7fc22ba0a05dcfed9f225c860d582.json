{"ast":null,"code":"import API from '../API';\nexport default {\n  getMovieById: id => dispatch => {\n    dispatch(setFetching(true));\n    return API.getDetails(id).then(response => {\n      // const additionalDataById = results.reduce((res, curr) => {\n      //   res[curr.id] = curr;\n      //   return res;\n      // }, {});\n      // dispatch(appDataActions.setData(results));\n      // dispatch(appDataActions.setTotalPages(total_pages));\n      // dispatch(appDataActions.setDataById({\n      //   ...additionalDataById\n      // }));\n      dispatch(setData(response));\n      dispatch(setFetching(false));\n      dispatch(setFetched(true));\n    }).catch(error => {\n      dispatch(setError(error));\n      dispatch(setFetching(false));\n      dispatch(setFetched(false));\n    });\n  },\n  getMovieByQuery: settings => dispatch => {\n    dispatch(setFetching(true));\n    return API.getMovieByQuery(settings).then(response => {\n      dispatch(setData(response));\n      dispatch(setFetching(false));\n      dispatch(setFetched(true));\n    }).catch(error => {\n      dispatch(setError(error));\n      dispatch(setFetching(false));\n      dispatch(setFetched(false));\n    });\n  },\n  discoverMovies: settings => dispatch => {\n    dispatch(setFetching(true));\n    return API.getMovieDiscover(settings).then(response => {\n      dispatch(setData(response));\n      dispatch(setFetching(false));\n      dispatch(setFetched(true));\n    }).catch(error => {\n      dispatch(setError(error));\n      dispatch(setFetching(false));\n      dispatch(setFetched(false));\n    });\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","getMovieById","id","dispatch","setFetching","getDetails","then","response","setData","setFetched","catch","error","setError","getMovieByQuery","settings","discoverMovies","getMovieDiscover"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,eAAe;AACbC,EAAAA,YAAY,EAAEC,EAAE,IAAIC,QAAQ,IAAI;AAC9BA,IAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;AAEA,WAAOJ,GAAG,CAACK,UAAJ,CAAeH,EAAf,EACJI,IADI,CACCC,QAAQ,IAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ,MAAAA,QAAQ,CAAEK,OAAO,CAACD,QAAD,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,IAAD,CAAZ,CAAR;AACD,KAdI,EAeJC,KAfI,CAeEC,KAAK,IAAI;AACdR,MAAAA,QAAQ,CAAES,QAAQ,CAACD,KAAD,CAAV,CAAR;AACAR,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,KAAD,CAAZ,CAAR;AACD,KAnBI,CAAP;AAoBD,GAxBY;AA0BbI,EAAAA,eAAe,EAAEC,QAAQ,IAAIX,QAAQ,IAAI;AACvCA,IAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;AAEA,WAAOJ,GAAG,CAACa,eAAJ,CAAoBC,QAApB,EACJR,IADI,CACCC,QAAQ,IAAI;AAEhBJ,MAAAA,QAAQ,CAAEK,OAAO,CAACD,QAAD,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,IAAD,CAAZ,CAAR;AACD,KANI,EAOJC,KAPI,CAOEC,KAAK,IAAI;AACdR,MAAAA,QAAQ,CAAES,QAAQ,CAACD,KAAD,CAAV,CAAR;AACAR,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,KAAD,CAAZ,CAAR;AACD,KAXI,CAAP;AAYD,GAzCY;AA2CbM,EAAAA,cAAc,EAAED,QAAQ,IAAIX,QAAQ,IAAI;AACtCA,IAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;AAEA,WAAOJ,GAAG,CAACgB,gBAAJ,CAAqBF,QAArB,EACJR,IADI,CACCC,QAAQ,IAAI;AAChBJ,MAAAA,QAAQ,CAAEK,OAAO,CAACD,QAAD,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,IAAD,CAAZ,CAAR;AACD,KALI,EAMJC,KANI,CAMEC,KAAK,IAAI;AACdR,MAAAA,QAAQ,CAAES,QAAQ,CAACD,KAAD,CAAV,CAAR;AACAR,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,KAAD,CAAZ,CAAR;AACD,KAVI,CAAP;AAWD;AAzDY,CAAf","sourcesContent":["import API from '../API';\r\n\r\nexport default {\r\n  getMovieById: id => dispatch => {\r\n    dispatch( setFetching(true) );\r\n  \r\n    return API.getDetails(id)\r\n      .then(response => {\r\n        // const additionalDataById = results.reduce((res, curr) => {\r\n        //   res[curr.id] = curr;\r\n        //   return res;\r\n        // }, {});\r\n        // dispatch(appDataActions.setData(results));\r\n        // dispatch(appDataActions.setTotalPages(total_pages));\r\n        // dispatch(appDataActions.setDataById({\r\n        //   ...additionalDataById\r\n        // }));\r\n        dispatch( setData(response) )\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(true) );\r\n      })\r\n      .catch(error => {\r\n        dispatch( setError(error) );\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(false) );\r\n      })\r\n  },\r\n\r\n  getMovieByQuery: settings => dispatch => {\r\n    dispatch( setFetching(true) );\r\n  \r\n    return API.getMovieByQuery(settings)\r\n      .then(response => {\r\n        \r\n        dispatch( setData(response) )\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(true) );\r\n      })\r\n      .catch(error => {\r\n        dispatch( setError(error) );\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(false) );\r\n      })\r\n  },\r\n  \r\n  discoverMovies: settings => dispatch => {\r\n    dispatch( setFetching(true) );\r\n  \r\n    return API.getMovieDiscover(settings)\r\n      .then(response => {\r\n        dispatch( setData(response) )\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(true) );\r\n      })\r\n      .catch(error => {\r\n        dispatch( setError(error) );\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(false) );\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}