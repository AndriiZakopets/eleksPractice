{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\containers\\\\FiltersContainer.js\";\nimport React, { useState, useCallback } from 'react';\nimport Filters from '../components/Filters';\nimport debounce from 'lodash/debounce';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setSettings } from '../actions/settingsActions';\nimport { SORTINGS } from '../constants';\nexport default function FiltersContainer() {\n  const _useSelector = useSelector(state => state.settings),\n        sorting = _useSelector.sorting,\n        searchQuery = _useSelector.searchQuery;\n\n  const _useSelector2 = useSelector(state => state.movies),\n        isFetching = _useSelector2.isFetching,\n        isFetched = _useSelector2.isFetched,\n        fetchError = _useSelector2.fetchError;\n\n  const _useState = useState(searchQuery),\n        _useState2 = _slicedToArray(_useState, 2),\n        tempSearchQuery = _useState2[0],\n        setTempSearchQuery = _useState2[1];\n\n  const dispatch = useDispatch();\n  const changeSettingsDebounced = useCallback(debounce(newSettings => {\n    dispatch(setSettings(_objectSpread({}, newSettings)));\n  }, 400), []);\n\n  const onSearchQueryChange = e => {\n    setTempSearchQuery(e.target.value);\n    changeSettingsDebounced({\n      searchQuery: e.target.value\n    });\n  };\n\n  const onSortingChange = e => {\n    dispatch(setSettings({\n      sorting: e.target.value\n    }));\n  };\n\n  return React.createElement(Filters, {\n    onSortingChange: onSortingChange,\n    onSearchQueryChange: onSearchQueryChange,\n    searchQuery: tempSearchQuery,\n    sorting: sorting,\n    sortingKeys: SORTINGS,\n    isFetching: isFetching,\n    isFetched: isFetched,\n    error: fetchError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/containers/FiltersContainer.js"],"names":["React","useState","useCallback","Filters","debounce","useSelector","useDispatch","setSettings","SORTINGS","FiltersContainer","state","settings","sorting","searchQuery","movies","isFetching","isFetched","fetchError","tempSearchQuery","setTempSearchQuery","dispatch","changeSettingsDebounced","newSettings","onSearchQueryChange","e","target","value","onSortingChange"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA,uBACRJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,QAAhB,CADH;AAAA,QACjCC,OADiC,gBACjCA,OADiC;AAAA,QACxBC,WADwB,gBACxBA,WADwB;;AAAA,wBAEKR,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACI,MAAhB,CAFhB;AAAA,QAEjCC,UAFiC,iBAEjCA,UAFiC;AAAA,QAErBC,SAFqB,iBAErBA,SAFqB;AAAA,QAEVC,UAFU,iBAEVA,UAFU;;AAAA,oBAIKhB,QAAQ,CAACY,WAAD,CAJb;AAAA;AAAA,QAIlCK,eAJkC;AAAA,QAIjBC,kBAJiB;;AAMzC,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,QAAMe,uBAAuB,GAAGnB,WAAW,CACzCE,QAAQ,CAACkB,WAAW,IAAI;AACtBF,IAAAA,QAAQ,CAACb,WAAW,mBAAMe,WAAN,EAAZ,CAAR;AACD,GAFO,EAEL,GAFK,CADiC,EAIzC,EAJyC,CAA3C;;AAOA,QAAMC,mBAAmB,GAAGC,CAAC,IAAI;AAC/BL,IAAAA,kBAAkB,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACAL,IAAAA,uBAAuB,CAAC;AAAER,MAAAA,WAAW,EAAEW,CAAC,CAACC,MAAF,CAASC;AAAxB,KAAD,CAAvB;AACD,GAHD;;AAKA,QAAMC,eAAe,GAAGH,CAAC,IAAI;AAC3BJ,IAAAA,QAAQ,CAACb,WAAW,CAAC;AAAEK,MAAAA,OAAO,EAAEY,CAAC,CAACC,MAAF,CAASC;AAApB,KAAD,CAAZ,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,OAAD;AACE,IAAA,eAAe,EAAEC,eADnB;AAEE,IAAA,mBAAmB,EAAEJ,mBAFvB;AAGE,IAAA,WAAW,EAAEL,eAHf;AAIE,IAAA,OAAO,EAAEN,OAJX;AAKE,IAAA,WAAW,EAAEJ,QALf;AAME,IAAA,UAAU,EAAEO,UANd;AAOE,IAAA,SAAS,EAAEC,SAPb;AAQE,IAAA,KAAK,EAAEC,UART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport Filters from '../components/Filters';\r\nimport debounce from 'lodash/debounce';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setSettings } from '../actions/settingsActions';\r\nimport { SORTINGS } from '../constants';\r\n\r\nexport default function FiltersContainer() {\r\n  const { sorting, searchQuery } = useSelector(state => state.settings);\r\n  const { isFetching, isFetched, fetchError } = useSelector(state => state.movies);\r\n\r\n  const [tempSearchQuery, setTempSearchQuery] = useState(searchQuery); \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const changeSettingsDebounced = useCallback(\r\n    debounce(newSettings => {\r\n      dispatch(setSettings({ ...newSettings }))\r\n    }, 400), \r\n    []\r\n  );\r\n\r\n  const onSearchQueryChange = e => {\r\n    setTempSearchQuery(e.target.value);\r\n    changeSettingsDebounced({ searchQuery: e.target.value });\r\n  }\r\n\r\n  const onSortingChange = e => {\r\n    dispatch(setSettings({ sorting: e.target.value }));\r\n  }\r\n\r\n  return (\r\n    <Filters \r\n      onSortingChange={onSortingChange}\r\n      onSearchQueryChange={onSearchQueryChange}\r\n      searchQuery={tempSearchQuery}\r\n      sorting={sorting}\r\n      sortingKeys={SORTINGS}\r\n      isFetching={isFetching}\r\n      isFetched={isFetched}\r\n      error={fetchError}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}