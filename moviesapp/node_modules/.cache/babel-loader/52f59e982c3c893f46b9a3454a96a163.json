{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions';\n\nconst additionalDataById = results => {\n  return results.reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n}; // export const getMovieById = id => async dispatch => {\n//   dispatch( setFetching(true) );\n//   try {\n//     const response = await API.getDetails(id);\n//     dispatch(setData(response));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(true));\n//   }\n//   catch (error) {\n//     dispatch(setError(error));\n//     dispatch(setFetching(false));\n//     dispatch(setFetched(false));\n//   }\n// };\n\n\nexport const getMovieByQuery = settings => async dispatch => {\n  console.log('getMovieByQuery');\n  dispatch(appDataActions.setFetching({\n    isFetching: true,\n    isFetched: false\n  }));\n\n  try {\n    const _ref = await API.getMovieByQuery(settings),\n          results = _ref.results,\n          total_pages = _ref.total_pages;\n\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById(results))));\n    dispatch(appDataActions.setData(results));\n    dispatch(appDataActions.setTotalPages(total_pages));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: true\n    }));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: false\n    }));\n  }\n};\nexport const discoverMovies = settings => async dispatch => {\n  console.log('discoverMovies');\n  dispatch(appDataActions.setFetching({\n    isFetching: true,\n    isFetched: false\n  }));\n\n  try {\n    const _ref2 = await API.getMovieDiscover(settings),\n          results = _ref2.results,\n          total_pages = _ref2.total_pages;\n\n    dispatch(appDataActions.setData(results));\n    dispatch(appDataActions.setTotalPages(total_pages));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: true\n    }));\n  } catch (error) {\n    dispatch(appDataActions.setError(error));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: false\n    }));\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","additionalDataById","results","reduce","acc","curr","id","getMovieByQuery","settings","dispatch","console","log","setFetching","isFetching","isFetched","total_pages","setDataById","setData","setTotalPages","error","setError","discoverMovies","getMovieDiscover"],"mappings":"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","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\nconst additionalDataById = results => {\r\n  return results.reduce((acc, curr) => {\r\n    acc[curr.id] = curr;\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n// export const getMovieById = id => async dispatch => {\r\n//   dispatch( setFetching(true) );\r\n\r\n//   try {\r\n//     const response = await API.getDetails(id);\r\n//     dispatch(setData(response));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(true));\r\n//   }\r\n//   catch (error) {\r\n//     dispatch(setError(error));\r\n//     dispatch(setFetching(false));\r\n//     dispatch(setFetched(false));\r\n//   }\r\n// };\r\n\r\nexport const getMovieByQuery = settings => async dispatch => {\r\n  console.log('getMovieByQuery');\r\n  dispatch(appDataActions.setFetching({\r\n    isFetching: true,\r\n    isFetched: false\r\n  }));\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieByQuery(settings);\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById(results)\r\n    }));\r\n    dispatch(appDataActions.setData(results));\r\n    dispatch(appDataActions.setTotalPages(total_pages));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: true\r\n    }));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: false\r\n    }));\r\n  }\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  console.log('discoverMovies');\r\n  dispatch(appDataActions.setFetching({\r\n    isFetching: true,\r\n    isFetched: false\r\n  }));\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieDiscover(settings);\r\n    dispatch(appDataActions.setData(results));\r\n    dispatch(appDataActions.setTotalPages(total_pages));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: true\r\n    }));\r\n  } catch (error) {\r\n    dispatch(appDataActions.setError(error));\r\n    dispatch(appDataActions.setFetching({\r\n      isFetching: false,\r\n      isFetched: false\r\n    }));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}