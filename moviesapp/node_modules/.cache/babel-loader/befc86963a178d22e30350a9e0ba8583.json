{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\components\\\\Catalog.js\";\nimport React, { useEffect, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport API from '../API';\nimport Filters from './Filters';\nimport ListItem from './ListItem';\nconst TRENDING = 'trending';\nconst POPULAR = 'popular';\nconst TOP = 'top';\nconst REQUEST_MAP = {\n  [TRENDING]: API.getTrending,\n  [POPULAR]: API.getPopular,\n  [TOP]: API.getTopRated\n};\n\nfunction Catalog({\n  history,\n  addCacheData\n}) {\n  ;\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState({\n    sorting: localStorage.getItem('sorting') || 'trending',\n    page: localStorage.getItem('page') || 1,\n    searchQuery: ''\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        settings = _useState4[0],\n        setSettings = _useState4[1];\n\n  useEffect(() => {\n    fetchData().catch(alert);\n  }, [settings]);\n  useEffect(() => {\n    localStorage.setItem('page', settings.page);\n    localStorage.setItem('sorting', settings.sorting);\n    addCacheData(data);\n  }, [data]);\n\n  const changeSettings = (newSettings = {}) => {\n    setSettings(prevState => _objectSpread({}, prevState, {\n      page: 1\n    }, newSettings));\n  };\n\n  const changeSettingsDebounced = debounce(changeSettings, 400);\n\n  const changeData = ({\n    results\n  }) => setData(results);\n\n  const fetchData = () => {\n    const searchQuery = settings.searchQuery,\n          sorting = settings.sorting,\n          page = settings.page;\n\n    if (searchQuery) {\n      API.getMovieByQuery(page, searchQuery).then(changeData);\n    } else {\n      const requestFunc = REQUEST_MAP[sorting];\n\n      if (requestFunc) {\n        requestFunc(page).then(changeData);\n      }\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"Catalog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Filters, {\n    settings: settings,\n    changeSettings: changeSettings,\n    changeSettingsDebounced: changeSettingsDebounced,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, data.map(movie => React.createElement(ListItem, {\n    movie: movie,\n    key: movie.id,\n    history: history,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))));\n}\n\nexport default Catalog;","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/components/Catalog.js"],"names":["React","useEffect","useState","debounce","API","Filters","ListItem","TRENDING","POPULAR","TOP","REQUEST_MAP","getTrending","getPopular","getTopRated","Catalog","history","addCacheData","data","setData","sorting","localStorage","getItem","page","searchQuery","settings","setSettings","fetchData","catch","alert","setItem","changeSettings","newSettings","prevState","changeSettingsDebounced","changeData","results","getMovieByQuery","then","requestFunc","map","movie","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport API from '../API'\r\nimport Filters from './Filters'\r\nimport ListItem from './ListItem';\r\n\r\nconst TRENDING = 'trending';\r\nconst POPULAR = 'popular';\r\nconst TOP = 'top';\r\n\r\nconst REQUEST_MAP = {\r\n  [TRENDING]: API.getTrending,\r\n  [POPULAR]: API.getPopular,\r\n  [TOP]: API.getTopRated\r\n}\r\n\r\nfunction Catalog({ history, addCacheData }) {;\r\n  const [data, setData] = useState([]);\r\n  const [settings, setSettings] = useState({\r\n    sorting: localStorage.getItem('sorting') || 'trending',\r\n    page: localStorage.getItem('page') || 1,\r\n    searchQuery: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n    .catch(alert);\r\n  }, [settings]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('page', settings.page);\r\n    localStorage.setItem('sorting', settings.sorting);\r\n    addCacheData(data);\r\n  }, [data]);\r\n\r\n  const changeSettings = (newSettings = {}) => {\r\n    setSettings(prevState => ({\r\n      ...prevState,\r\n      page: 1,\r\n      ...newSettings\r\n    }));\r\n  }\r\n  \r\n  const changeSettingsDebounced = debounce(changeSettings, 400);\r\n\r\n  const changeData =  ({ results }) => setData(results);\r\n\r\n  const fetchData = () => {\r\n    const { searchQuery, sorting, page } = settings;\r\n\r\n    if (searchQuery) {\r\n      API.getMovieByQuery(page, searchQuery).then(changeData);\r\n    } else {\r\n      const requestFunc = REQUEST_MAP[sorting];\r\n\r\n      if (requestFunc) {\r\n        requestFunc(page).then(changeData);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Catalog\">\r\n      <Filters \r\n        settings={settings} \r\n        changeSettings={changeSettings}\r\n        changeSettingsDebounced={changeSettingsDebounced}\r\n      />\r\n      <div className=\"list\">\r\n        {\r\n          data.map(movie => (\r\n            <ListItem\r\n              movie={movie}\r\n              key={movie.id}\r\n              history={history}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}