{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\src\\\\Beautiful-dnd\\\\DragContainer.js\";\nimport React, { useState } from 'react';\nimport initialData from './initial-data';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from './Column';\nexport default function DragContainer() {\n  const _useState = useState(initialData),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const onDragEnd = result => {\n    const destination = result.destination,\n          sourse = result.sourse,\n          draggableId = result.draggableId;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === SourceBuffer.droppableId && destination.index === ConstantSourceNode.index) {\n      return;\n    }\n\n    const column = data.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskId);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n\n    const newCData = _objectSpread({}, column, {\n      taskIds: newTaskIds\n    });\n\n    const newState = _objectSpread({}, data, {\n      columns: _objectSpread({}, data.columns, {\n        [newColumn.id]: newColumn\n      })\n    });\n\n    setData(newData);\n  };\n\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, data.columnOrder.map(columnId => {\n    const column = data.columns[columnId];\n    const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tasks: tasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  }));\n}","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/Beautiful-dnd/DragContainer.js"],"names":["React","useState","initialData","DragDropContext","Column","DragContainer","data","setData","onDragEnd","result","destination","sourse","draggableId","droppableId","SourceBuffer","index","ConstantSourceNode","column","columns","source","newTaskIds","Array","from","taskId","splice","newCData","taskIds","newState","newColumn","id","newData","columnOrder","map","columnId","tasks"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA,oBACdJ,QAAQ,CAACC,WAAD,CADM;AAAA;AAAA,QAC/BI,IAD+B;AAAA,QACzBC,OADyB;;AAGtC,QAAMC,SAAS,GAAGC,MAAM,IAAI;AAAA,UAClBC,WADkB,GACmBD,MADnB,CAClBC,WADkB;AAAA,UACLC,MADK,GACmBF,MADnB,CACLE,MADK;AAAA,UACGC,WADH,GACmBH,MADnB,CACGG,WADH;;AAG1B,QAAI,CAACF,WAAL,EAAkB;AAChB;AACD;;AAED,QACEA,WAAW,CAACG,WAAZ,KAA4BC,YAAY,CAACD,WAAzC,IACAH,WAAW,CAACK,KAAZ,KAAsBC,kBAAkB,CAACD,KAF3C,EAGE;AACA;AACD;;AAED,UAAME,MAAM,GAAGX,IAAI,CAACY,OAAL,CAAaC,MAAM,CAACN,WAApB,CAAf;AACA,UAAMO,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWL,MAAM,CAACM,MAAlB,CAAnB;AACAH,IAAAA,UAAU,CAACI,MAAX,CAAkBL,MAAM,CAACJ,KAAzB,EAAgC,CAAhC;AACAK,IAAAA,UAAU,CAACI,MAAX,CAAkBd,WAAW,CAACK,KAA9B,EAAqC,CAArC,EAAwCH,WAAxC;;AAEA,UAAMa,QAAQ,qBACTR,MADS;AAEZS,MAAAA,OAAO,EAAEN;AAFG,MAAd;;AAKA,UAAMO,QAAQ,qBACTrB,IADS;AAEZY,MAAAA,OAAO,oBACFZ,IAAI,CAACY,OADH;AAEL,SAACU,SAAS,CAACC,EAAX,GAAgBD;AAFX;AAFK,MAAd;;AAQArB,IAAAA,OAAO,CAACuB,OAAD,CAAP;AACD,GAjCD;;AAmCA,SACE,oBAAC,eAAD;AACE,IAAA,SAAS,EAAEtB,SADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIEF,IAAI,CAACyB,WAAL,CAAiBC,GAAjB,CAAqBC,QAAQ,IAAI;AAC/B,UAAMhB,MAAM,GAAGX,IAAI,CAACY,OAAL,CAAae,QAAb,CAAf;AACA,UAAMC,KAAK,GAAGjB,MAAM,CAACS,OAAP,CAAeM,GAAf,CAAmBT,MAAM,IAAIjB,IAAI,CAAC4B,KAAL,CAAWX,MAAX,CAA7B,CAAd;AAEA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEN,MAAM,CAACY,EAApB;AAAwB,MAAA,MAAM,EAAEZ,MAAhC;AAAwC,MAAA,KAAK,EAAEiB,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GALD,CAJF,CADF;AAcD","sourcesContent":["import React, { useState } from 'react';\r\nimport initialData from './initial-data';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport Column from './Column';\r\n\r\nexport default function DragContainer() {\r\n  const [data, setData] = useState(initialData);\r\n\r\n  const onDragEnd = result => {\r\n    const { destination, sourse, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === SourceBuffer.droppableId &&\r\n      destination.index === ConstantSourceNode.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const column = data.columns[source.droppableId];\r\n    const newTaskIds = Array.from(column.taskId);\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newCData = {\r\n      ...column,\r\n      taskIds: newTaskIds\r\n    };\r\n\r\n    const newState = {\r\n      ...data,\r\n      columns: {\r\n        ...data.columns,\r\n        [newColumn.id]: newColumn\r\n      }\r\n    }\r\n\r\n    setData(newData);\r\n  }\r\n\r\n  return (\r\n    <DragDropContext\r\n      onDragEnd={onDragEnd}\r\n    >\r\n      {\r\n      data.columnOrder.map(columnId => {\r\n        const column = data.columns[columnId];\r\n        const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\r\n\r\n        return <Column key={column.id} column={column} tasks={tasks} />;\r\n      })\r\n    }\r\n    </DragDropContext>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}