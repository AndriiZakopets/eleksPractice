{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nimport appDataActions from '../actions/appDataActions'; // export default {\n//   getMovieById: id => async dispatch => {\n//     dispatch( setFetching(true) );\n//     try {\n//       const response = await API.getDetails(id);\n//       dispatch(setData(response));\n//       dispatch(setFetching(false));\n//       dispatch(setFetched(true));\n//     }\n//     catch (error) {\n//       dispatch(setError(error));\n//       dispatch(setFetching(false));\n//       dispatch(setFetched(false));\n//     }\n//   },\n//   getMovieByQuery: settings => async dispatch => {\n//     dispatch( setFetching(true) );\n//     try {\n//       const { results, total_pages } = await API.getMovieByQuery(settings);\n//       const additionalDataById = results.reduce((acc, curr) => {\n//         res[curr.id] = curr;\n//         return acc;\n//       }, {});\n//       dispatch(appDataActions.setDataById({\n//         ...additionalDataById\n//       }));\n//       dispatch(appDataActions.setData(results));\n//       dispatch(appDataActions.setTotalPages(total_pages));\n//       dispatch(appDataActions.setFetching({ isFetching: false, isFetched: true }));\n//     }\n//     catch (error) {\n//       dispatch(setError(error));\n//       dispatch(setFetching(false));\n//       dispatch(setFetched(false));\n//     }\n//   },\n//   discoverMovies: settings => async dispatch => {\n//     dispatch( setFetching(true) );\n//     try {\n//       const response = await API.getMovieDiscover(settings);\n//       dispatch(setData(response));\n//       dispatch(setFetching(false));\n//       dispatch(setFetched(true));\n//     }\n//     catch (error) {\n//       dispatch(setError(error));\n//       dispatch(setFetching(false));\n//       dispatch(setFetched(false));\n//     }\n//   }\n// }\n\nexport const getMovieById = id => async dispatch => {\n  dispatch(setFetching(true));\n\n  try {\n    const response = await API.getDetails(id);\n    dispatch(setData(response));\n    dispatch(setFetching(false));\n    dispatch(setFetched(true));\n  } catch (error) {\n    dispatch(setError(error));\n    dispatch(setFetching(false));\n    dispatch(setFetched(false));\n  }\n};\nexport const getMovieByQuery = settings => async dispatch => {\n  dispatch(setFetching(true));\n\n  try {\n    const _ref = await API.getMovieByQuery(settings),\n          results = _ref.results,\n          total_pages = _ref.total_pages;\n\n    const additionalDataById = results.reduce((acc, curr) => {\n      res[curr.id] = curr;\n      return acc;\n    }, {});\n    dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById)));\n    dispatch(appDataActions.setData(results));\n    dispatch(appDataActions.setTotalPages(total_pages));\n    dispatch(appDataActions.setFetching({\n      isFetching: false,\n      isFetched: true\n    }));\n  } catch (error) {\n    dispatch(setError(error));\n    dispatch(setFetching(false));\n    dispatch(setFetched(false));\n  }\n};\nexport const discoverMovies = settings => async dispatch => {\n  dispatch(setFetching(true));\n\n  try {\n    const response = await API.getMovieDiscover(settings);\n    dispatch(setData(response));\n    dispatch(setFetching(false));\n    dispatch(setFetched(true));\n  } catch (error) {\n    dispatch(setError(error));\n    dispatch(setFetching(false));\n    dispatch(setFetched(false));\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","appDataActions","getMovieById","id","dispatch","setFetching","response","getDetails","setData","setFetched","error","setError","getMovieByQuery","settings","results","total_pages","additionalDataById","reduce","acc","curr","res","setDataById","setTotalPages","isFetching","isFetched","discoverMovies","getMovieDiscover"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,cAAP,MAA2B,2BAA3B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,YAAY,GAAGC,EAAE,IAAI,MAAMC,QAAN,IAAkB;AAClDA,EAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;;AAEA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,UAAJ,CAAeJ,EAAf,CAAvB;AACAC,IAAAA,QAAQ,CAACI,OAAO,CAACF,QAAD,CAAR,CAAR;AACAF,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACK,UAAU,CAAC,IAAD,CAAX,CAAR;AACD,GALD,CAMA,OAAOC,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAACO,QAAQ,CAACD,KAAD,CAAT,CAAR;AACAN,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACK,UAAU,CAAC,KAAD,CAAX,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMG,eAAe,GAAGC,QAAQ,IAAI,MAAMT,QAAN,IAAkB;AAC3DA,EAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;;AAEA,MAAI;AAAA,iBAC+B,MAAML,GAAG,CAACY,eAAJ,CAAoBC,QAApB,CADrC;AAAA,UACMC,OADN,QACMA,OADN;AAAA,UACeC,WADf,QACeA,WADf;;AAEF,UAAMC,kBAAkB,GAAGF,OAAO,CAACG,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AACvDC,MAAAA,GAAG,CAACD,IAAI,CAAChB,EAAN,CAAH,GAAegB,IAAf;AACA,aAAOD,GAAP;AACD,KAH0B,EAGxB,EAHwB,CAA3B;AAIAd,IAAAA,QAAQ,CAACH,cAAc,CAACoB,WAAf,mBACJL,kBADI,EAAD,CAAR;AAGAZ,IAAAA,QAAQ,CAACH,cAAc,CAACO,OAAf,CAAuBM,OAAvB,CAAD,CAAR;AACAV,IAAAA,QAAQ,CAACH,cAAc,CAACqB,aAAf,CAA6BP,WAA7B,CAAD,CAAR;AACAX,IAAAA,QAAQ,CAACH,cAAc,CAACI,WAAf,CAA2B;AAAEkB,MAAAA,UAAU,EAAE,KAAd;AAAqBC,MAAAA,SAAS,EAAE;AAAhC,KAA3B,CAAD,CAAR;AACD,GAZD,CAaA,OAAOd,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAACO,QAAQ,CAACD,KAAD,CAAT,CAAR;AACAN,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACK,UAAU,CAAC,KAAD,CAAX,CAAR;AACD;AACF,CArBM;AAuBP,OAAO,MAAMgB,cAAc,GAAGZ,QAAQ,IAAI,MAAMT,QAAN,IAAkB;AAC1DA,EAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;;AAEA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,GAAG,CAAC0B,gBAAJ,CAAqBb,QAArB,CAAvB;AACAT,IAAAA,QAAQ,CAACI,OAAO,CAACF,QAAD,CAAR,CAAR;AACAF,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACK,UAAU,CAAC,IAAD,CAAX,CAAR;AACD,GALD,CAMA,OAAOC,KAAP,EAAc;AACZN,IAAAA,QAAQ,CAACO,QAAQ,CAACD,KAAD,CAAT,CAAR;AACAN,IAAAA,QAAQ,CAACC,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAD,IAAAA,QAAQ,CAACK,UAAU,CAAC,KAAD,CAAX,CAAR;AACD;AACF,CAdM","sourcesContent":["import API from '../API';\r\nimport appDataActions from '../actions/appDataActions';\r\n\r\n// export default {\r\n//   getMovieById: id => async dispatch => {\r\n//     dispatch( setFetching(true) );\r\n  \r\n//     try {\r\n//       const response = await API.getDetails(id);\r\n//       dispatch(setData(response));\r\n//       dispatch(setFetching(false));\r\n//       dispatch(setFetched(true));\r\n//     }\r\n//     catch (error) {\r\n//       dispatch(setError(error));\r\n//       dispatch(setFetching(false));\r\n//       dispatch(setFetched(false));\r\n//     }\r\n//   },\r\n\r\n//   getMovieByQuery: settings => async dispatch => {\r\n//     dispatch( setFetching(true) );\r\n  \r\n//     try {\r\n//       const { results, total_pages } = await API.getMovieByQuery(settings);\r\n//       const additionalDataById = results.reduce((acc, curr) => {\r\n//         res[curr.id] = curr;\r\n//         return acc;\r\n//       }, {});\r\n//       dispatch(appDataActions.setDataById({\r\n//         ...additionalDataById\r\n//       }));\r\n//       dispatch(appDataActions.setData(results));\r\n//       dispatch(appDataActions.setTotalPages(total_pages));\r\n//       dispatch(appDataActions.setFetching({ isFetching: false, isFetched: true }));\r\n//     }\r\n//     catch (error) {\r\n//       dispatch(setError(error));\r\n//       dispatch(setFetching(false));\r\n//       dispatch(setFetched(false));\r\n//     }\r\n//   },\r\n  \r\n//   discoverMovies: settings => async dispatch => {\r\n//     dispatch( setFetching(true) );\r\n  \r\n//     try {\r\n//       const response = await API.getMovieDiscover(settings);\r\n//       dispatch(setData(response));\r\n//       dispatch(setFetching(false));\r\n//       dispatch(setFetched(true));\r\n//     }\r\n//     catch (error) {\r\n//       dispatch(setError(error));\r\n//       dispatch(setFetching(false));\r\n//       dispatch(setFetched(false));\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\nexport const getMovieById = id => async dispatch => {\r\n  dispatch( setFetching(true) );\r\n\r\n  try {\r\n    const response = await API.getDetails(id);\r\n    dispatch(setData(response));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(true));\r\n  }\r\n  catch (error) {\r\n    dispatch(setError(error));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(false));\r\n  }\r\n};\r\n\r\nexport const getMovieByQuery = settings => async dispatch => {\r\n  dispatch( setFetching(true) );\r\n\r\n  try {\r\n    const { results, total_pages } = await API.getMovieByQuery(settings);\r\n    const additionalDataById = results.reduce((acc, curr) => {\r\n      res[curr.id] = curr;\r\n      return acc;\r\n    }, {});\r\n    dispatch(appDataActions.setDataById({\r\n      ...additionalDataById\r\n    }));\r\n    dispatch(appDataActions.setData(results));\r\n    dispatch(appDataActions.setTotalPages(total_pages));\r\n    dispatch(appDataActions.setFetching({ isFetching: false, isFetched: true }));\r\n  }\r\n  catch (error) {\r\n    dispatch(setError(error));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(false));\r\n  }\r\n};\r\n\r\nexport const discoverMovies = settings => async dispatch => {\r\n  dispatch( setFetching(true) );\r\n\r\n  try {\r\n    const response = await API.getMovieDiscover(settings);\r\n    dispatch(setData(response));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(true));\r\n  }\r\n  catch (error) {\r\n    dispatch(setError(error));\r\n    dispatch(setFetching(false));\r\n    dispatch(setFetched(false));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}