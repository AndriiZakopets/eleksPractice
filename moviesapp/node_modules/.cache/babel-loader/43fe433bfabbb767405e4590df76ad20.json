{"ast":null,"code":"import _objectSpread from \"C:\\\\prog\\\\eleksPractice\\\\moviesapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport API from '../API';\nexport default {\n  getMovieById: id => dispatch => {\n    dispatch(setFetching(true));\n    return API.getDetails(id).then(response => {\n      dispatch(setData(response));\n      dispatch(setFetching(false));\n      dispatch(setFetched(true));\n    }).catch(error => {\n      dispatch(setError(error));\n      dispatch(setFetching(false));\n      dispatch(setFetched(false));\n    });\n  },\n  getMovieByQuery: settings => dispatch => {\n    dispatch(setFetching(true));\n    return API.getMovieByQuery(settings).then(({\n      results,\n      total_pages\n    }) => {\n      const additionalDataById = results.reduce((res, curr) => {\n        res[curr.id] = curr;\n        return res;\n      }, {});\n      dispatch(appDataActions.setData(results));\n      dispatch(appDataActions.setTotalPages(total_pages));\n      dispatch(appDataActions.setDataById(_objectSpread({}, additionalDataById)));\n      dispatch(setData(response));\n      dispatch(setFetching(false));\n      dispatch(setFetched(true));\n    }).catch(error => {\n      dispatch(setError(error));\n      dispatch(setFetching(false));\n      dispatch(setFetched(false));\n    });\n  },\n  discoverMovies: settings => dispatch => {\n    dispatch(setFetching(true));\n    return API.getMovieDiscover(settings).then(response => {\n      dispatch(setData(response));\n      dispatch(setFetching(false));\n      dispatch(setFetched(true));\n    }).catch(error => {\n      dispatch(setError(error));\n      dispatch(setFetching(false));\n      dispatch(setFetched(false));\n    });\n  }\n};","map":{"version":3,"sources":["C:/prog/eleksPractice/moviesapp/src/actions/asyncActions.js"],"names":["API","getMovieById","id","dispatch","setFetching","getDetails","then","response","setData","setFetched","catch","error","setError","getMovieByQuery","settings","results","total_pages","additionalDataById","reduce","res","curr","appDataActions","setTotalPages","setDataById","discoverMovies","getMovieDiscover"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,eAAe;AACbC,EAAAA,YAAY,EAAEC,EAAE,IAAIC,QAAQ,IAAI;AAC9BA,IAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;AAEA,WAAOJ,GAAG,CAACK,UAAJ,CAAeH,EAAf,EACJI,IADI,CACCC,QAAQ,IAAI;AAChBJ,MAAAA,QAAQ,CAAEK,OAAO,CAACD,QAAD,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,IAAD,CAAZ,CAAR;AACD,KALI,EAMJC,KANI,CAMEC,KAAK,IAAI;AACdR,MAAAA,QAAQ,CAAES,QAAQ,CAACD,KAAD,CAAV,CAAR;AACAR,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,KAAD,CAAZ,CAAR;AACD,KAVI,CAAP;AAWD,GAfY;AAiBbI,EAAAA,eAAe,EAAEC,QAAQ,IAAIX,QAAQ,IAAI;AACvCA,IAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;AAEA,WAAOJ,GAAG,CAACa,eAAJ,CAAoBC,QAApB,EACJR,IADI,CACC,CAAC;AAAES,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAD,KAA6B;AACjC,YAAMC,kBAAkB,GAAGF,OAAO,CAACG,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;AACvDD,QAAAA,GAAG,CAACC,IAAI,CAAClB,EAAN,CAAH,GAAekB,IAAf;AACA,eAAOD,GAAP;AACD,OAH0B,EAGxB,EAHwB,CAA3B;AAIAhB,MAAAA,QAAQ,CAACkB,cAAc,CAACb,OAAf,CAAuBO,OAAvB,CAAD,CAAR;AACAZ,MAAAA,QAAQ,CAACkB,cAAc,CAACC,aAAf,CAA6BN,WAA7B,CAAD,CAAR;AACAb,MAAAA,QAAQ,CAACkB,cAAc,CAACE,WAAf,mBACJN,kBADI,EAAD,CAAR;AAGAd,MAAAA,QAAQ,CAAEK,OAAO,CAACD,QAAD,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,IAAD,CAAZ,CAAR;AACD,KAdI,EAeJC,KAfI,CAeEC,KAAK,IAAI;AACdR,MAAAA,QAAQ,CAAES,QAAQ,CAACD,KAAD,CAAV,CAAR;AACAR,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,KAAD,CAAZ,CAAR;AACD,KAnBI,CAAP;AAoBD,GAxCY;AA0Cbe,EAAAA,cAAc,EAAEV,QAAQ,IAAIX,QAAQ,IAAI;AACtCA,IAAAA,QAAQ,CAAEC,WAAW,CAAC,IAAD,CAAb,CAAR;AAEA,WAAOJ,GAAG,CAACyB,gBAAJ,CAAqBX,QAArB,EACJR,IADI,CACCC,QAAQ,IAAI;AAChBJ,MAAAA,QAAQ,CAAEK,OAAO,CAACD,QAAD,CAAT,CAAR;AACAJ,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,IAAD,CAAZ,CAAR;AACD,KALI,EAMJC,KANI,CAMEC,KAAK,IAAI;AACdR,MAAAA,QAAQ,CAAES,QAAQ,CAACD,KAAD,CAAV,CAAR;AACAR,MAAAA,QAAQ,CAAEC,WAAW,CAAC,KAAD,CAAb,CAAR;AACAD,MAAAA,QAAQ,CAAEM,UAAU,CAAC,KAAD,CAAZ,CAAR;AACD,KAVI,CAAP;AAWD;AAxDY,CAAf","sourcesContent":["import API from '../API';\r\n\r\nexport default {\r\n  getMovieById: id => dispatch => {\r\n    dispatch( setFetching(true) );\r\n  \r\n    return API.getDetails(id)\r\n      .then(response => {\r\n        dispatch( setData(response) )\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(true) );\r\n      })\r\n      .catch(error => {\r\n        dispatch( setError(error) );\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(false) );\r\n      })\r\n  },\r\n\r\n  getMovieByQuery: settings => dispatch => {\r\n    dispatch( setFetching(true) );\r\n  \r\n    return API.getMovieByQuery(settings)\r\n      .then(({ results, total_pages}) => {\r\n        const additionalDataById = results.reduce((res, curr) => {\r\n          res[curr.id] = curr;\r\n          return res;\r\n        }, {});\r\n        dispatch(appDataActions.setData(results));\r\n        dispatch(appDataActions.setTotalPages(total_pages));\r\n        dispatch(appDataActions.setDataById({\r\n          ...additionalDataById\r\n        }));\r\n        dispatch( setData(response) )\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(true) );\r\n      })\r\n      .catch(error => {\r\n        dispatch( setError(error) );\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(false) );\r\n      })\r\n  },\r\n  \r\n  discoverMovies: settings => dispatch => {\r\n    dispatch( setFetching(true) );\r\n  \r\n    return API.getMovieDiscover(settings)\r\n      .then(response => {\r\n        dispatch( setData(response) )\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(true) );\r\n      })\r\n      .catch(error => {\r\n        dispatch( setError(error) );\r\n        dispatch( setFetching(false) );\r\n        dispatch( setFetched(false) );\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}